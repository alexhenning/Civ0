	<html><title>Civ 0--Civilization: Year 0, a JavaScript open-source implementation of a civilization-style game</title>
<body style="min-width: 600px; margin: 0px;">
<div id="message" style="font-size: 12px; color: black; background-color: white; border: 2px solid black; padding 2px; position: absolute; display: none">Random Text</div>
<script type="text/javascript">

var Debug = 1;

function Rand(X){
   return(Math.floor(Math.random()*X+1));
}

function Distance(Row1, Col1, Row2, Col2){
   return Math.sqrt(Math.pow(Row1-Row2,2)+Math.pow(Col1-Col2,2));
}

var Terrain = new Array();
Ocean = 0;
Terrain[Ocean] = {name: "Ocean", symbol: "o", food: 1, production: 0, trade: 2, movementCost: 1, defense: 1};
Glacier = 1;
Terrain[Glacier] = {name: "Glacier", symbol: "c", food: 0, production: 0, trade: 0, movementCost: 2, defense: 1};
Tundra = 2;
Terrain[Tundra] = {name: "Tundra", symbol: "t", food: 1, production: 0, trade: 0, movementCost: 1, defense: 1};
Plains = 3;
Terrain[Plains] = {name: "Plains", symbol: "p", food: 1, production: 1, trade: 0, movementCost: 1, defense: 1};
Grassland = 4;
Terrain[Grassland] = {name: "Grassland", symbol: "g", food: 2, production: 0, trade: 0, movementCost: 1, defense: 1};
Forest = 5;
Terrain[Forest] = {name: "Forest", symbol: "f", food: 1, production: 2, trade: 0, movementCost: 2, defense: 1.5};
Swamp = 6;
Terrain[Swamp] = {name: "Swamp", symbol: "s", food: 1, production: 0, trade: 0, movementCost: 2, defense: 1.5};
Jungle = 7;
Terrain[Jungle] = {name: "Jungle", symbol: "j", food: 1, production: 0, trade: 0, movementCost: 3, defense: 1.5};
Desert = 8;
Terrain[Desert] = {name: "Desert", symbol: "d", food: 0, production: 1, trade: 0, movementCost: 1, defense: 1};
Hills = 9;
Terrain[Hills] = {name: "Hills", symbol: "h", food: 1, production: 0, trade: 0, movementCost: 2, defense: 2};
Mountains = 10;
Terrain[Mountains] = {name: "Mountain", symbol: "m", food: 0, production: 1, trade: 0, movementCost: 3, defense: 3};
TerrainSymbol = new Array();
for (X=Ocean; X<=Mountains; X++){
   TerrainSymbol[Terrain[X].symbol] = X;
   //alert(X + ", '" + Terrain[X].symbol + "', " + TerrainSymbol[Terrain[X].symbol]);
}

// Technology can affect these global variables
var HealingRate = 1;
var LostAtSeaLikelihood = 25;

var Tech = new Array();
AdvancedFlight = 1;
Alphabet = 2;
AmphibiousWarfare = 3;
Astronomy = 4;
AtomicTheory = 5;
Automobile = 6;
Banking = 7;
BridgeBuilding = 8;
BronzeWorking = 9;
CeremonialBurial = 10;
Chemistry = 11;
Chivalry = 12;
CityBuilding = 13;
CodeofLaws = 14;
CombinedArms = 15;
Combustion = 16;
Communism = 17;
Computers = 18;
Conscription = 19;
Construction = 20;
Currency = 21;
Democracy = 22;
Economics = 23;
Electricity = 24;
Electronics = 25;
Engineering = 26;
Environmentalism = 27;
Espionage = 28;
Explosives = 29;
Feudalism = 30;
Flight = 31;
Fundamentalism = 32;
FusionPower = 33;
GeneticEngineering = 34;
GuerillaWarfare = 35;
Gunpowder = 36;
HorsebackRiding = 37;
Industrialization = 38;
Invention = 39;
IronWorking = 40;
LaborUnion = 41;
Laser = 42;
Leadership = 43;
Literacy = 44;
MachineTools = 45;
Magnetism = 46;
MapMaking = 47;
Masonry = 48;
MassProduction = 49;
Mathematics = 50;
Medicine = 51;
Metallurgy = 52;
Miniaturization = 53;
MobileWarfare = 54;
Monarchy = 55;
Monotheism = 56;
Mysticism = 57;
Navigation = 58;
NuclearFission = 59;
NuclearPower = 60;
Philosophy = 61;
Physics = 62;
Plastics = 63;
Polytheism = 64;
Pottery = 65;
Radio = 66;
Railroad = 67;
Recycling = 68;
Refining = 69;
Refrigeration = 70;
Robotics = 71;
Rocketry = 72;
Sanitation = 73;
Seafaring = 74;
SpaceFlight = 75;
Stealth = 76;
SteamEngine = 77;
Steel = 78;
Superconductors = 79;
Tactics = 80;
TheCorporation = 81;
TheRepublic = 82;
TheWheel = 83;
Theology = 84;
TheoryofGravity = 85;
Trade = 86;
University = 87;
WarriorCode = 88;
Writing = 89;
Tech[AdvancedFlight] = {name: 'Advanced Flight', prereq1: Radio, prereq2: MachineTools, playerOwned: false, AIOwned: false, code: ""};
Tech[Alphabet] = {name: 'Alphabet', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[AmphibiousWarfare] = {name: 'Amphibious Warfare', prereq1: Navigation, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Astronomy] = {name: 'Astronomy', prereq1: Mysticism, prereq2: Mathematics, playerOwned: false, AIOwned: false, code: ""};
Tech[AtomicTheory] = {name: 'Atomic Theory', prereq1: TheoryofGravity, prereq2: Physics, playerOwned: false, AIOwned: false, code: ""};
Tech[Automobile] = {name: 'Automobile', prereq1: Combustion, prereq2: Steel, playerOwned: false, AIOwned: false, code: ""};
Tech[Banking] = {name: 'Banking', prereq1: Trade, prereq2: TheRepublic, playerOwned: false, AIOwned: false, code: ""};
Tech[BridgeBuilding] = {name: 'Bridge Building', prereq1: IronWorking, prereq2: Construction, playerOwned: false, AIOwned: false, code: ""};
Tech[BronzeWorking] = {name: 'Bronze Working', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[CeremonialBurial] = {name: 'Ceremonial Burial', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Chemistry] = {name: 'Chemistry', prereq1: University, prereq2: Medicine, playerOwned: false, AIOwned: false, code: ""};
Tech[Chivalry] = {name: 'Chivalry', prereq1: Feudalism, prereq2: HorsebackRiding, playerOwned: false, AIOwned: false, code: ""};
Tech[CityBuilding] = {name: 'City Building', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: true, AIOwned: true, code: ""};
Tech[CodeofLaws] = {name: 'Code of Laws', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[CombinedArms] = {name: 'Combined Arms', prereq1: MobileWarfare, prereq2: AdvancedFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Combustion] = {name: 'Combustion', prereq1: Refining, prereq2: Explosives, playerOwned: false, AIOwned: false, code: ""};
Tech[Communism] = {name: 'Communism', prereq1: Philosophy, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[Computers] = {name: 'Computers', prereq1: MassProduction, prereq2: Miniaturization, playerOwned: false, AIOwned: false, code: ""};
Tech[Conscription] = {name: 'Conscription', prereq1: Democracy, prereq2: Metallurgy, playerOwned: false, AIOwned: false, code: "HealingRate=3;"};
Tech[Construction] = {name: 'Construction', prereq1: Masonry, prereq2: Currency, playerOwned: false, AIOwned: false, code: ""};
Tech[Currency] = {name: 'Currency', prereq1: BronzeWorking, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Democracy] = {name: 'Democracy', prereq1: Banking, prereq2: Invention, playerOwned: false, AIOwned: false, code: ""};
Tech[Economics] = {name: 'Economics', prereq1: Banking, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Electricity] = {name: 'Electricity', prereq1: Metallurgy, prereq2: Magnetism, playerOwned: false, AIOwned: false, code: ""};
Tech[Electronics] = {name: 'Electronics', prereq1: TheCorporation, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Engineering] = {name: 'Engineering', prereq1: TheWheel, prereq2: Construction, playerOwned: false, AIOwned: false, code: ""};
Tech[Environmentalism] = {name: 'Environmentalism', prereq1: Recycling, prereq2: SpaceFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Espionage] = {name: 'Espionage', prereq1: Communism, prereq2: Democracy, playerOwned: false, AIOwned: false, code: ""};
Tech[Explosives] = {name: 'Explosives', prereq1: Gunpowder, prereq2: Chemistry, playerOwned: false, AIOwned: false, code: ""};
Tech[Feudalism] = {name: 'Feudalism', prereq1: WarriorCode, prereq2: Monarchy, playerOwned: false, AIOwned: false, code: "HealingRate=2;"};
Tech[Flight] = {name: 'Flight', prereq1: Combustion, prereq2: TheoryofGravity, playerOwned: false, AIOwned: false, code: ""};
Tech[Fundamentalism] = {name: 'Fundamentalism', prereq1: Theology, prereq2: Conscription, playerOwned: false, AIOwned: false, code: ""};
Tech[FusionPower] = {name: 'Fusion Power', prereq1: NuclearPower, prereq2: Superconductors, playerOwned: false, AIOwned: false, code: ""};
Tech[GeneticEngineering] = {name: 'Genetic Engineering', prereq1: Medicine, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[GuerillaWarfare] = {name: 'Guerilla Warfare', prereq1: Communism, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Gunpowder] = {name: 'Gunpowder', prereq1: Invention, prereq2: IronWorking, playerOwned: false, AIOwned: false, code: ""};
Tech[HorsebackRiding] = {name: 'Horseback Riding', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Industrialization] = {name: 'Industrialization', prereq1: Railroad, prereq2: Banking, playerOwned: false, AIOwned: false, code: "TransportClass=ModernTransport;"};
Tech[Invention] = {name: 'Invention', prereq1: Engineering, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[IronWorking] = {name: 'Iron Working', prereq1: BronzeWorking, prereq2: WarriorCode, playerOwned: false, AIOwned: false, code: ""};
Tech[LaborUnion] = {name: 'Labor Union', prereq1: MassProduction, prereq2: GuerillaWarfare, playerOwned: false, AIOwned: false, code: ""};
Tech[Laser] = {name: 'Laser', prereq1: MassProduction, prereq2: NuclearPower, playerOwned: false, AIOwned: false, code: ""};
Tech[Leadership] = {name: 'Leadership', prereq1: Chivalry, prereq2: Gunpowder, playerOwned: false, AIOwned: false, code: ""};
Tech[Literacy] = {name: 'Literacy', prereq1: Writing, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[MachineTools] = {name: 'Machine Tools', prereq1: Steel, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Magnetism] = {name: 'Magnetism', prereq1: IronWorking, prereq2: Physics, playerOwned: false, AIOwned: false, code: "TransportClass=Galleon; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[MapMaking] = {name: 'Map Making', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: "TransportClass=Trireme; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[Masonry] = {name: 'Masonry', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[MassProduction] = {name: 'Mass Production', prereq1: Automobile, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[Mathematics] = {name: 'Mathematics', prereq1: Alphabet, prereq2: Masonry, playerOwned: false, AIOwned: false, code: ""};
Tech[Medicine] = {name: 'Medicine', prereq1: Philosophy, prereq2: Trade, playerOwned: false, AIOwned: false, code: ""};
Tech[Metallurgy] = {name: 'Metallurgy', prereq1: Gunpowder, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Miniaturization] = {name: 'Miniaturization', prereq1: MachineTools, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[MobileWarfare] = {name: 'Mobile Warfare', prereq1: Automobile, prereq2: Tactics, playerOwned: false, AIOwned: false, code: "HealingRate=4;"};
Tech[Monarchy] = {name: 'Monarchy', prereq1: CeremonialBurial, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[Monotheism] = {name: 'Monotheism', prereq1: Philosophy, prereq2: Polytheism, playerOwned: false, AIOwned: false, code: ""};
Tech[Mysticism] = {name: 'Mysticism', prereq1: CeremonialBurial, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Navigation] = {name: 'Navigation', prereq1: Seafaring, prereq2: Astronomy, playerOwned: false, AIOwned: false, code: "TransportClass=Caravel; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[NuclearFission] = {name: 'Nuclear Fission', prereq1: MassProduction, prereq2: AtomicTheory, playerOwned: false, AIOwned: false, code: ""};
Tech[NuclearPower] = {name: 'Nuclear Power', prereq1: NuclearFission, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[Philosophy] = {name: 'Philosophy', prereq1: Mysticism, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[Physics] = {name: 'Physics', prereq1: Literacy, prereq2: Navigation, playerOwned: false, AIOwned: false, code: ""};
Tech[Plastics] = {name: 'Plastics', prereq1: Refining, prereq2: SpaceFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Polytheism] = {name: 'Polytheism', prereq1: HorsebackRiding, prereq2: CeremonialBurial, playerOwned: false, AIOwned: false, code: ""};
Tech[Pottery] = {name: 'Pottery', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Radio] = {name: 'Radio', prereq1: Flight, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Railroad] = {name: 'Railroad', prereq1: SteamEngine, prereq2: BridgeBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Recycling] = {name: 'Recycling', prereq1: MassProduction, prereq2: Democracy, playerOwned: false, AIOwned: false, code: ""};
Tech[Refining] = {name: 'Refining', prereq1: Chemistry, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[Refrigeration] = {name: 'Refrigeration', prereq1: Sanitation, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Robotics] = {name: 'Robotics', prereq1: MobileWarfare, prereq2: Computers, playerOwned: false, AIOwned: false, code: ""};
Tech[Rocketry] = {name: 'Rocketry', prereq1: AdvancedFlight, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[Sanitation] = {name: 'Sanitation', prereq1: Engineering, prereq2: Medicine, playerOwned: false, AIOwned: false, code: ""};
Tech[Seafaring] = {name: 'Seafaring', prereq1: Pottery, prereq2: MapMaking, playerOwned: false, AIOwned: false, code: "LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[SpaceFlight] = {name: 'Space Flight', prereq1: Computers, prereq2: Rocketry, playerOwned: false, AIOwned: false, code: ""};
Tech[Stealth] = {name: 'Stealth', prereq1: Superconductors, prereq2: AdvancedFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[SteamEngine] = {name: 'Steam Engine', prereq1: Physics, prereq2: Invention, playerOwned: false, AIOwned: false, code: ""};
Tech[Steel] = {name: 'Steel', prereq1: Electricity, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[Superconductors] = {name: 'Superconductors', prereq1: NuclearPower, prereq2: Laser, playerOwned: false, AIOwned: false, code: ""};
Tech[Tactics] = {name: 'Tactics', prereq1: Conscription, prereq2: Leadership, playerOwned: false, AIOwned: false, code: ""};
Tech[TheCorporation] = {name: 'The Corporation', prereq1: Economics, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[TheRepublic] = {name: 'The Republic', prereq1: CodeofLaws, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[TheWheel] = {name: 'The Wheel', prereq1: HorsebackRiding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Theology] = {name: 'Theology', prereq1: Feudalism, prereq2: Monotheism, playerOwned: false, AIOwned: false, code: ""};
Tech[TheoryofGravity] = {name: 'Theory of Gravity', prereq1: Astronomy, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Trade] = {name: 'Trade', prereq1: Currency, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[University] = {name: 'University', prereq1: Mathematics, prereq2: Philosophy, playerOwned: false, AIOwned: false, code: ""};
Tech[WarriorCode] = {name: 'Warrior Code', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Writing] = {name: 'Writing', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};

CurrentTech = CityBuilding;
CurrentTechCost = 0;
TechReserve = 0;
TechCount = 0;

var Product = new Array();
Settler = 1; Product[Settler] = {type: 'unit', name: 'Settler', imgStub: 'settler', prereq: CityBuilding, cost: 40, class: 'EI', mobility: 1, attack: 0, defense: 1, health: 10, firepower: 1, obsolete: false};
Warrior = 2; Product[Warrior] = {type: 'unit', name: 'Warrior', imgStub: 'warrior', prereq: CityBuilding, cost: 10, class: 'EI', mobility: 1, attack: 1, defense: 1, health: 10, firepower: 1, obsolete: false};
Horseman = 3; Product[Horseman] = {type: 'unit', name: 'Horseman', imgStub: 'horseman', prereq: HorsebackRiding, cost: 20, class: 'EC', mobility: 2, attack: 2, defense: 1, health: 10, firepower: 1, obsolete: false};
Archer = 4; Product[Archer] = {type: 'unit', name: 'Archer', imgStub: 'archer', prereq: WarriorCode, cost: 30, class: 'EI', mobility: 1, attack: 3, defense: 2, health: 10, firepower: 1, obsolete: false};
Phalanx = 5; Product[Phalanx] = {type: 'unit', name: 'Phalanx', imgStub: 'phalanx', prereq: BronzeWorking, cost: 20, class: 'HI', mobility: 1, attack: 1, defense: 2, health: 10, firepower: 1, obsolete: false};
Chariot = 6; Product[Chariot] = {type: 'unit', name: 'Chariot', imgStub: 'chariot', prereq: TheWheel, cost: 30, class: 'EC', mobility: 2, attack: 3, defense: 1, health: 10, firepower: 1, obsolete: false};
Catapult = 7; Product[Catapult] = {type: 'unit', name: 'Catapult', imgStub: 'catapult', prereq: Mathematics, cost: 40, class: 'SE', mobility: 1, attack: 6, defense: 1, health: 10, firepower: 1, obsolete: false};
Legion = 8; Product[Legion] = {type: 'unit', name: 'Legion', imgStub: 'legion', prereq: IronWorking, cost: 40, class: 'HI', mobility: 1, attack: 4, defense: 2, health: 10, firepower: 1, obsolete: false};
Pikeman = 9; Product[Pikeman] = {type: 'unit', name: 'Pikeman', imgStub: 'pikeman', prereq: Feudalism, cost: 20, class: 'HI', mobility: 1, attack: 1, defense: 2, health: 10, firepower: 1, obsolete: false};
Knight = 10; Product[Knight] = {type: 'unit', name: 'Knight', imgStub: 'knight', prereq: Chivalry, cost: 40, class: 'EC', mobility: 2, attack: 4, defense: 2, health: 10, firepower: 1, obsolete: false};
Frigate = 11; Product[Frigate] = {type: 'unit', name: 'Frigate', imgStub: 'frigate', prereq: Magnetism, cost: 50, class: 'N', mobility: 4, attack: 4, defense: 2, health: 20, firepower: 1, obsolete: false};
Ironclad = 12; Product[Ironclad] = {type: 'unit', name: 'Ironclad', imgStub: 'ironclad', prereq: SteamEngine, cost: 60, class: 'N', mobility: 4, attack: 4, defense: 4, health: 30, firepower: 1, obsolete: false};
Musketeer = 13; Product[Musketeer] = {type: 'unit', name: 'Musketeer', imgStub: 'musketeer', prereq: Gunpowder, cost: 30, class: 'LI', mobility: 1, attack: 3, defense: 3, health: 20, firepower: 1, obsolete: false};
Dragoon = 14; Product[Dragoon] = {type: 'unit', name: 'Dragoon', imgStub: 'dragoon', prereq: Leadership, cost: 50, class: 'EC', mobility: 2, attack: 5, defense: 2, health: 20, firepower: 1, obsolete: false};
Cannon = 15; Product[Cannon] = {type: 'unit', name: 'Cannon', imgStub: 'cannon', prereq: Metallurgy, cost: 40, class: 'SE', mobility: 1, attack: 8, defense: 1, health: 20, firepower: 1, obsolete: false};
Destroyer = 16; Product[Destroyer] = {type: 'unit', name: 'Destroyer', imgStub: 'destroyer', prereq: Electricity, cost: 60, class: 'N', mobility: 6, attack: 4, defense: 4, health: 30, firepower: 1, obsolete: false};
Rifleman = 17; Product[Rifleman] = {type: 'unit', name: 'Rifleman', imgStub: 'rifleman', prereq: Conscription, cost: 40, class: 'LI', mobility: 1, attack: 4, defense: 4, health: 20, firepower: 1, obsolete: false};
Cavalry = 18; Product[Cavalry] = {type: 'unit', name: 'Cavalry', imgStub: 'cavalry', prereq: Tactics, cost: 60, class: 'LC', mobility: 2, attack: 8, defense: 3, health: 20, firepower: 1, obsolete: false};
Cruiser = 19; Product[Cruiser] = {type: 'unit', name: 'Cruiser', imgStub: 'cruiser', prereq: Steel, cost: 80, class: 'N', mobility: 5, attack: 6, defense: 6, health: 30, firepower: 2, obsolete: false};
Battleship = 20; Product[Battleship] = {type: 'unit', name: 'Battleship', imgStub: 'battleship', prereq: Automobile, cost: 160, class: 'N', mobility: 4, attack: 12, defense: 12, health: 40, firepower: 2, obsolete: false};
Submarine = 21; Product[Submarine] = {type: 'unit', name: 'Submarine', imgStub: 'submarine', prereq: Combustion, cost: 50, class: 'N', mobility: 5, attack: 15, defense: 2, health: 30, firepower: 2, obsolete: false};
Artillery = 22; Product[Artillery] = {type: 'unit', name: 'Artillery', imgStub: 'artillery', prereq: MachineTools, cost: 50, class: 'SE', mobility: 1, attack: 10, defense: 1, health: 20, firepower: 2, obsolete: false};
Fighter = 23; Product[Fighter] = {type: 'unit', name: 'Fighter', imgStub: 'fighter', prereq: Flight, cost: 60, class: 'AF', mobility: 10, attack: 4, defense: 3, health: 20, firepower: 2, obsolete: false};
Carrier = 24; Product[Carrier] = {type: 'unit', name: 'Carrier', imgStub: 'carrier', prereq: AdvancedFlight, cost: 160, class: 'N', mobility: 5, attack: 1, defense: 9, health: 40, firepower: 2, obsolete: false};
Armor = 25; Product[Armor] = {type: 'unit', name: 'Armor', imgStub: 'armor', prereq: MobileWarfare, cost: 80, class: 'LC', mobility: 3, attack: 10, defense: 5, health: 30, firepower: 1, obsolete: false};
MechInf = 26; Product[MechInf] = {type: 'unit', name: 'Mech. Inf.', imgStub: 'mechinf', prereq: LaborUnion, cost: 50, class: 'LI', mobility: 3, attack: 6, defense: 6, health: 30, firepower: 1, obsolete: false};
Howitzer = 27; Product[Howitzer] = {type: 'unit', name: 'Howitzer', imgStub: 'howitzer', prereq: Robotics, cost: 70, class: 'SE', mobility: 2, attack: 12, defense: 2, health: 30, firepower: 2, obsolete: false};
Bomber = 28; Product[Bomber] = {type: 'unit', name: 'Bomber', imgStub: 'bomber', prereq: AdvancedFlight, cost: 120, class: 'AF', mobility: 8, attack: 12, defense: 1, health: 20, firepower: 2, obsolete: false};
SpyPlane = 29; Product[SpyPlane] = {type: 'unit', name: 'Spy Plane', imgStub: 'spyplane', prereq: AdvancedFlight, cost: 140, class: 'AF', mobility: 16, attack: 0, defense: 1, health: 20, firepower: 1, obsolete: false};
NuclearMissile = 30; Product[NuclearMissile] = {type: 'unit', name: 'Nuclear Missile', imgStub: 'nuclearmissile', prereq: Rocketry, cost: 160, class: 'M', mobility: 16, attack: 99, defense: 0, health: 10, firepower: 1, obsolete: false};
CruiseMissile = 31; Product[CruiseMissile] = {type: 'unit', name: 'Cruise Missile', imgStub: 'cruisemissile', prereq: Rocketry, cost: 60, class: 'M', mobility: 12, attack: 18, defense: 0, health: 10, firepower: 1, obsolete: false};
StealthBomber = 32; Product[StealthBomber] = {type: 'unit', name: 'Stealth Bomber', imgStub: 'stealthbomber', prereq: Stealth, cost: 160, class: 'AF', mobility: 12, attack: 18, defense: 5, health: 20, firepower: 2, obsolete: false};
StealthFighter = 33; Product[StealthFighter] = {type: 'unit', name: 'Stealth Fighter', imgStub: 'stealthfighter', prereq: Stealth, cost: 80, class: 'AF', mobility: 14, attack: 8, defense: 4, health: 20, firepower: 2, obsolete: false};

var Troopship = new Array();
Boat = 1; Troopship[Boat] = {type: 'unit', name: 'Boat', imgStub: 'boat', prereq: CityBuilding, cost: 40, class: 'N', mobility: 1, attack: 0, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 2, obsolete: false};
Trireme = 2; Troopship[Trireme] = {type: 'unit', name: 'Trireme', imgStub: 'trireme', prereq: MapMaking, cost: 40, class: 'N', mobility: 2, attack: 1, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 2, obsolete: false};
Caravel = 3; Troopship[Caravel] = {type: 'unit', name: 'Caravel', imgStub: 'caravel', prereq: Navigation, cost: 40, class: 'N', mobility: 3, attack: 2, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 3, obsolete: false};
Galleon = 4; Troopship[Galleon] = {type: 'unit', name: 'Galleon', imgStub: 'galleon', prereq: Magnetism, cost: 40, class: 'N', mobility: 4, attack: 2, defense: 2, health: 20, firepower: 1, TroopshipCapacity: 4, obsolete: false};
Transport = 5; Troopship[Transport] = {type: 'unit', name: 'Transport', imgStub: 'Transport', prereq: Industrialization, cost: 50, class: 'N', mobility: 5, attack: 2, defense: 3, health: 30, firepower: 1, TroopshipCapacity: 8, obsolete: false};
TroopshipClass = Boat;

MaxRow = 24;
MaxCol = 30; //prompt("How wide a world is it?","30");
StartRow = 0;
StartCol = 0;

var Region = new Array();
TerrainProbability = new Array("ttc","ttttc", "tppp", "pppgfs", "gfs", "jjsgg", "jjjssg", "gggd", "dddgg");

var City = new Array();

var Unit = new Array();

function TerrainAtLatitude(Row){
   switch (Rand(20)){
      case 1: return Mountains; break;
      case 2: return Hills; break;
      default:
         Latitude = Math.floor(Row/MaxRow*17);
         if (Latitude>8){Latitude = 17-Latitude};
         Choices = String(TerrainProbability[Latitude]);
         Choice = Choices.charAt(Rand(Choices.length)-1);
         //if (Debug){Debug = confirm(Choice + ": " + TerrainSymbol[Choice] + ". Continue debugging?");}
         return TerrainSymbol[Choice];
   }
}

function RegionImage(Row, Col, focus){
   var R;
   var S = 'p'+Row+'_'+Col;
   var U = Region[Row][Col].unit;
   if ((U!=-1)&&(Unit[U] !== undefined)){
      var T;
      if (Unit[U].player){
         if (focus){
            T = "focus";
            document.getElementById(S).focus();
         }else{
            T = "player";
         }
      }else{
         T = "enemy";
      }
      R = ", health "+Unit[U].health+", "+(Math.floor(100*Terrain[Region[Unit[U].row][Unit[U].col].terrain].defense))+"% defense";
      R += ", "+Math.floor(100*Unit[U].veterancy-100)+"% veterancy";
      if (Region[Row][Col].terrain!=Ocean){
         document.getElementById(S).src=Product[Unit[U].type].imgStub+"_"+T+".png";
         document.getElementById(S).title = Product[Unit[U].type].name+R;
      }else{
         document.getElementById(S).src=Troopship[Unit[U].TroopshipClass].imgStub+"_"+T+".png";
         document.getElementById(S).title = Troopship[Unit[U].TroopshipClass].name+R;
      }
   }else{
      if(Region[Row][Col].city!=-1){
         document.getElementById(S).src="city_player.png";
         var C=Region[Row][Col].city;
         document.getElementById(S).title = City[C].name+", "+City[C].citizens+" citizens, producing "+Product[City[C].product].name+" ("+Math.floor(100*City[C].productionReserve/Product[City[C].product].cost)+"%)";
      }else{
         var T=Region[Row][Col].terrain;
         document.getElementById(S).src=Terrain[T].symbol+".png";
         document.getElementById(S).title = Terrain[T].name+", "+Math.floor(100*Terrain[T].defense)+"% defense";
      }
   }
}


function RegionTitle(Row, Col, Title){
   var S = 'p'+Row+'_'+Col;
   document.getElementById(S).title = Title;
}

function GenerateMap(Region){

   for (Row=-1; Row<=MaxRow+1; Row++){
      Region[Row] = new Array();
   }

   // sea by default
   for (Row=-1; Row<=MaxRow+1; Row++){
      for (Col=-1; Col<=MaxCol+1; Col++){
         Region[Row][Col] = {terrain: Ocean, unit: -1, city: -1};
      }
   }
   // glaciers
   for (Col=-1; Col<MaxCol+1; Col++){
      Region[0][Col].terrain = Glacier;
      if (Rand(3)==1){
         Region[1][Col].terrain = Glacier;
      }
      if (Rand(6)==1){
         Region[MaxRow-2][Col].terrain = Glacier;
      }
	  Region[MaxRow-1][Col].terrain = Glacier;
   }


   Land1 = Rand(6)+5;
   LandEnd1 = Land1+Rand(5)+Rand(5);
   LandOffset2 = Rand(6)+10;
   Land2 = LandEnd1+LandOffset2;
   LandEnd2 = Math.min(Land2+Rand(5)+Rand(5),MaxCol);
   // insert a channel at the narrowest point
   NarrowestWidth = MaxCol;
   NarrowestRow = MaxRow;
   for (Row=1; Row<MaxRow-3; Row++){
      for (Col=Land1; Col<=LandEnd1; Col++){
         Region[Row][Col].terrain = TerrainAtLatitude(Row);
      }
      if (Row>Rand(4)) {
         for (Col=Land2; Col<=LandEnd2; Col++){
            Region[Row][Col].terrain = TerrainAtLatitude(Row);
         }
         if ((Row>4) & (LandEnd1-Land1>=2) & (StartRow==0)){
            StartRow = Row;
            StartCol = Land1+Rand(LandEnd1-Land1-1);
         }
      }
      Land1 = Math.max(Land1+Rand(5)-3,1);
      LandEnd1 = LandEnd1+Rand(3)-2;
      if (LandEnd1<Land1-1){
         LandEnd1=Land1+Rand(5)+5;
      	 NarrowestRow=Row;
      }
      if ((Row>3+Rand(3))&&(LandEnd1-Land1<NarrowestWidth)){
         NarrowestWidth=LandEnd1-Land1;
         NarrowestRow=Row;
      }
      Land2 = LandEnd1+LandOffset2+Rand(3)-2;
      LandEnd2 = Math.min(LandEnd2+Rand(5)-3,MaxCol);
   }
   for (Col=0; Col<MaxCol/2; Col++){
      Region[NarrowestRow][Col].terrain = Ocean;
   }

}


/* Units */
function UnitString(){
   var S=Product[Unit[0].type].name;
   for (U=1; U<Unit.length; U++){
      S = S + ", " + Product[Unit[U].type].name;
   }
   return(S);
}

function DeleteUnit(U){
   //alert("["+Unit[U].row+","+Unit[U].col+"]");
   Region[Unit[U].row][Unit[U].col].unit = -1;
   RegionImage(Unit[U].row,Unit[U].col,false);
   //alert(UnitString());
   if(U<Unit.length-1){
      if (ActiveUnit==U) {ActiveUnit = Unit.length-2};
      Unit[U] = Unit[Unit.length-1];
      Region[Unit[U].row][Unit[U].col].unit = U;
      //RegionImage(Unit[U].row,Unit[U].col,false);
      //alert("["+Unit[U].row+","+Unit[U].col+"].unit="+Region[Unit[U].row][Unit[U].col].unit);
      Unit.pop();
   }else{
      Unit.pop();
      ActiveUnit = Unit.length-1;
   }
   //alert(UnitString());
}

function IncreaseUnitVeterancy(U){
   var R = Rand(10)/10+1;
   if (R>Unit[U].veterancy){
     Unit[U].veterancy = (Unit[U].veterancy+R)/2;
   }
}

function Combat(Attacker,Defender){
   //alert("Combat! "+Attacker+" vs. "+Defender);
   var AttackStrength = Product[Unit[Attacker].type].attack*Unit[Attacker].veterancy;
   var DefenseStrength = Product[Unit[Defender].type].defense*Unit[Defender].veterancy*Terrain[Region[Unit[Defender].row][Unit[Defender].col].terrain].defense;
   for (var Round=1; Round<10; Round++){
      if (Rand(100)<100*AttackStrength/(AttackStrength+DefenseStrength)){
         Unit[Defender].health-=2*Product[Unit[Attacker].type].firepower;
      }else{
         Unit[Attacker].health-=2*Product[Unit[Defender].type].firepower;
      }
   }
   //alert("Combat! "+Unit[Attacker].health+" vs. "+Unit[Defender].health);
   Unit[Defender].health=Math.max(Unit[Defender].health,0);
   Unit[Attacker].health=Math.max(Unit[Attacker].health,0);
   var S = ""
   /* Careful: Deletions can change the order of the Unit array and invalidate subsequent indices */
   if ((Unit[Attacker].health==0) && (Unit[Defender].health==0)){
      DeleteUnit(Attacker);
      DeleteUnit(Defender);
      S="Both units were killed in combat.";
   }else{
      if (Unit[Attacker].health==0){
         RegionImage(Unit[Defender].row,Unit[Defender].col,false);
         IncreaseUnitVeterancy(Defender);
         S = "The attacker was killed in combat. Defender's health is "+Unit[Defender].health+".";
         DeleteUnit(Attacker);
      }else{
         if (Unit[Defender].health==0){
            RegionImage(Unit[Attacker].row,Unit[Attacker].col,false);
            IncreaseUnitVeterancy(Attacker);
            S="The defender was killed in combat. Attacker's health is "+Unit[Attacker].health+".";
	        DeleteUnit(Defender);
         }else{
            RegionImage(Unit[Defender].row,Unit[Defender].col,false);
            RegionImage(Unit[Attacker].row,Unit[Attacker].col,false);
            S="Combat was a draw. The attacker's health is "+Unit[Attacker].health+"; the defender's health is "+Unit[Defender].health+".";
         }
      }
   }
   return(S);
}


function UnitMoveToDestination(U){
   if(Unit[U].destinationRow==undefined){
      return(false);
   }
   var GoalRow=Unit[U].row;
   var GoalCol=Unit[U].col;
   var GoalDistance=Distance(GoalRow,GoalCol,Unit[U].destinationRow,Unit[U].destinationCol);
   for (Row=Unit[U].row-1; Row<=Unit[U].row+1; Row++){
      for (Col=Unit[U].col-1; Col<=Unit[U].col+1; Col++){
         if ((Region[Row][Col].unit==-1) && (Distance(Row,Col,Unit[U].destinationRow,Unit[U].destinationCol)<GoalDistance)){
            GoalDistance = Distance(Row,Col,Unit[U].destinationRow,Unit[U].destinationCol);
            GoalRow=Row;
            GoalCol=Col;
         }
      }
   }

}

/* Nations */

PlayerCityName = new Array("Babylon", "Lagash", "Nippur", "Ur", "Kish", "Shuruppak", "Kisurra", "Cutha", "Adab", "Umma", "Akkad", "Eridu", "Larsa", "Borsippa", "Sippar", "Nineveh", "Ashur", "Calach", "Carcar", "Hamat",  "Opis", "Cunaxa", "Arbela", "Nisibis", "Carrhae", "Seleucia", "Ctesiphon", "Sittace", "Orchoe", "Apamea");
PlayerCity = 0;


/* Cities */


function CitySiteString(Row,Col,Food,Production,Trade){
   if (Region[Row][Col].terrain!=Ocean){
      Food = 0;
      Production = 0;
      Trade = 0;
      for (var A=-1; A<=1; A++){
         for (var B=-1; B<=1; B++){
            Food += Terrain[Region[Row+A][Col+B].terrain].food;
            Production += Terrain[Region[Row+A][Col+B].terrain].production;
            Trade += Terrain[Region[Row+A][Col+B].terrain].trade;
         }
      }
      return ("City has potential for "+(Food+Production+Trade)+" points ("+Food+"f/"+Production+"p/"+Trade+"t)");
   }else{
      return("Ocean, 100% defense");
   }
}


function TooCloseToCity(Row,Col){
   for (var C=0; C<City.length; C++){
      if (Distance(Row,Col,City[C].row,City[C].col)<3){
         return(true);
      }
   }
   return(false);
}


function FoundCity(Row,Col,Player){
   Food = 0; Production=0; Trade=0;
   CitySiteString(Row,Col,Food,Production,Trade);
   City.push({name: "Unnamed", foodReserve: 0, productionReserve: 0, row: Row, col: Col, food: Food, production: Production, trade: Trade, product: Warrior, citizens: 2});
   Region[Row][Col].city = City.length-1;
   if (Player){
      if (PlayerCity<=PlayerCityName.length-1){
         City[City.length-1].name = PlayerCityName[PlayerCity];
      }else{
         City[City.length-1].name = "City #"+(PlayerCity+1);
      }
      PlayerCity++;
      if (Unit[1].city=-1){
         Unit[1].city=City.length-1;
         RegionImage(Unit[1].row, Unit[1].col, false);
      }
   }else{
      RegionImage(Row, Col, false);
   }
}

function NextCitizen(C){
   City[C].foodReserve += Math.max(City[C].food/City[C].citizens,1);
   if (City[C].foodReserve>=10*City[C].citizens){
      City[C].foodReserve -= 10*City[C].citizens;
      City[C].citizens++;
   }
   RegionImage(City[C].row,City[C].col,false);
}

function NextProduct(C){
   City[C].productionReserve += Math.max(City[C].production/City[C].citizens,1);
   if (City[C].productionReserve>=Product[City[C].product].cost){
      City[C].productionReserve -= Product[City[C].product].cost;
      Unit.push({type: City[C].product, row: City[C].row, col: City[C].col, movement: Product[City[C].product].mobility, health: Product[City[C].product].health, active: true, player: true, city: C, TroopshipClass: TroopshipClass, veterancy: 1});
      Region[City[C].row][City[C].col].unit = Unit.length-1;
      RegionImage(City[C].row, City[C].col, false);
      var Menu = new Array();
      for (X=StealthFighter; X>=Settler; X--){
         if (Tech[Product[X].prereq].playerOwned){
            Menu.push({name: Product[X].name, value: X});
         }
      }
      X = MenuPrompt(City[C].name+" has built "+Product[City[C].product].name+". What should they build next? ", Menu);
      City[C].product = X;
   }
   RegionImage(City[C].row,City[C].col,false);
}



/* UI */

var ActiveUnit = 0;

MessageBox = {
    element: document.getElementById("message"),
    SetLocation: function(row, col) {
        MessageBox.element.style.top = (20 * row + 40) + "px";
        MessageBox.element.style.left = (20 * col + 10 - ((MessageBox.element.getBoundingClientRect().right - MessageBox.element.getBoundingClientRect().left) / 2)) + "px";
        MessageBox.SetVisibility(true);
    },
    SetVisibility: function(val) {
        if (val == true) {MessageBox.element.style.display = "block";}
        else {MessageBox.element.style.display = "none";}
    },
    SetText: function(text) {
        MessageBox.element.innerHTML = text;
        MessageBox.SetVisibility(true);
    },
    OnHover: function(row, col, element) {
        var text; // below is a hack to disable title text in addition a to the custom one on hover
        if (element.title != "" && element.title != null) {text = element.title;}
        else if (element.stored_text == null) {text = "";}
        else {text = element.stored_text;}

       MessageBox.SetText(text);
       MessageBox.SetLocation(row, col);
       element.stored_text = text;
       element.title = "";
       if (text == "") {MessageBox.SetVisibility(false);} // prevents black boxes when their is no text
   }
}

function MenuPrompt(Message, Menu){
   for (X=0; X<Menu.length; X++){
      Message += (X+1)+". "+Menu[X].name+", ";
   }
   Message = Message.substring(0,Message.length-2);
   X = prompt(Message);
   if ((1<=X)&(X<=Menu.length)){
      return (Menu[X-1].value);
   }else{
      return (Menu[0].value);
   }
}

function NextTech(){
   if (TechReserve>=CurrentTechCost){
      TechReserve -= CurrentTechCost;
   	  Tech[CurrentTech].playerOwned = true;
   	  if (Tech[CurrentTech].code!="") eval(Tech[CurrentTech].code);
      TechCount++;
      var Menu = new Array();
      for (X=AdvancedFlight; X<=Writing; X++){
         if (!Tech[X].playerOwned & Tech[Tech[X].prereq1].playerOwned & Tech[Tech[X].prereq2].playerOwned){
            Menu.push({name: Tech[X].name, value: X});
         }
      }
      X = MenuPrompt("Your scientists have discovered "+Tech[CurrentTech].name + ". What should they research next? ", Menu);
      CurrentTech = X;
   }
   TechReserve++; /* TBD: factor in trade progress */
   CurrentTechCost = TechCount;
}


function Turn(){
   //alert("starting loop with "+ActiveUnit+" and Unit.length of "+Unit.length);
   while ((ActiveUnit>0) && ((!Unit[ActiveUnit].active) || (Unit[ActiveUnit].movement==0) || (!Unit[ActiveUnit].player))){
      ActiveUnit--;
   }
   //alert("Active Unit = " + ActiveUnit);
   if ((Unit[ActiveUnit].active) && (Unit[ActiveUnit].movement) && (Unit[ActiveUnit].player)){
      RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
   }else{
      for (U=0; U<Unit.length; U++){
         // restore health to standby units
         if (!Unit[U].active){
            if(Unit[U].health!=Product[Unit[U].type].health){
               Unit[U].health += HealingRate;
               if(Unit[U].health>=Product[Unit[U].type].health){
                  Unit[U].health = Product[Unit[U].type].health;
                  Unit[U].active = Unit[U].player;
               }
            }
         }
         if (Unit[U].active){
            Unit[U].movement = Product[Unit[U].type].mobility;
         }
      }
      NextTech();
      for (C=0; C<City.length; C++){
         NextCitizen(C);
         NextProduct(C);
      }
      ActiveUnit = Unit.length-1;
      while (ActiveUnit && ((!Unit[ActiveUnit].active) || (!Unit[ActiveUnit].movement) || (!Unit[ActiveUnit].player))){
         ActiveUnit--;
      }
      if (!ActiveUnit && !Unit[ActiveUnit].active && !Unit[ActiveUnit].player){
         for (U=0; U<Unit.length; U++){
            if (Unit[U].player){
               Unit[U].active = true;
               Unit[U].movement = Product[Unit[U].type].mobility;
            }
         }
      }
      ActiveUnit = Unit.length-1;
      while (ActiveUnit && ((!Unit[ActiveUnit].active) || (!Unit[ActiveUnit].movement) || (!Unit[ActiveUnit].player))){
         ActiveUnit--;
      }
      if (!ActiveUnit && !Unit[ActiveUnit].active && !Unit[ActiveUnit].player){
         alert("All your units are destroyed. Game over.")
         ActiveUnit=-1;
      }else{
         RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
      }
   }
}


function i(Row, Col){
   if ((Row==Unit[ActiveUnit].row) & (Col==Unit[ActiveUnit].col)){
      if (Unit[ActiveUnit].type==Settler){
         if ((Region[Row][Col].terrain!=Ocean) && !TooCloseToCity(Row,Col) && (confirm("Build a city here? " + CitySiteString(Row,Col) + "."))){
            FoundCity(Row,Col,true);
            DeleteUnit(ActiveUnit);
            RegionImage(Row, Col, false);
            Turn();
         }
      }else{
         if(confirm("Put the unit on sentry duty (standby)?")){
            Unit[ActiveUnit].active = false;
            Unit[ActiveUnit].movement = 0;
            RegionImage(Row, Col, false);
            Turn();
         }
      }
   }else{
      if (Distance(Row, Col, Unit[ActiveUnit].row, Unit[ActiveUnit].col)<=Math.min(Unit[ActiveUnit].movement,1.5)){
         if (Region[Row][Col].unit!=-1){
            alert(Combat(ActiveUnit,Region[Row][Col].unit));
         }else{
            Region[Unit[ActiveUnit].row][Unit[ActiveUnit].col].unit = -1;
            LostAtSea = ((Region[Row][Col].terrain==Ocean) && (Region[Unit[ActiveUnit].row][Unit[ActiveUnit].col].terrain==Ocean) && (Rand(100)*Unit[ActiveUnit].movement<=LostAtSeaLikelihood));
            if (LostAtSea){
               alert("This unit was lost at sea.");
               DeleteUnit(ActiveUnit);
            }else{
               var OldRow = Unit[ActiveUnit].row;
               Unit[ActiveUnit].row = Row;
               Unit[ActiveUnit].col = Col;
               Unit[ActiveUnit].movement = Math.max(0,Unit[ActiveUnit].movement-Terrain[Region[Row][Col].terrain].movementCost);
               Region[Row][Col].unit = ActiveUnit;
            }
            var Barbarian=-1;
            for (A=-1; A<=1; A++){
               for (B=-1; B<=1; B++){
                  //alert(Region[X+A][Y+B].terrain);
                  var S = 'p'+(Row+A)+'_'+(Col+B);
                  if (((A!=0)||(B!=0)) && (document.getElementById(S).src.indexOf('u.png')!=-1) && (Rand(Math.abs(Row-StartRow))+Rand(3)>6)){
                     // Barbarians
                     Unit.push({type: Rand(4)+1, row: Row+A, col: Col+B, movement: 0, active: false, player: false, city: -1, health: 10, TroopshipClass: Math.min(Transport,TroopshipClass+Rand(2)-1), veterancy: 1});
                     Region[Row+A][Col+B].unit = Unit.length-1;
                  }else{
                     if ((Region[Row+A][Col+B].unit!=-1) && !Unit[Region[Row+A][Col+B].unit].player){
				        Barbarian=Region[Row+A][Col+B].unit;
				     }
                  }
                  RegionImage(Row+A, Col+B, false);
                  if(!LostAtSea && (Unit[ActiveUnit].type==Settler)){
                     document.getElementById(S).title = CitySiteString(Row+A,Col+B);
                  }
               }
            }
            if ((Barbarian!=-1) && (Math.abs(Row-StartRow)>Math.abs(OldRow-StartRow))){
              alert("Ambushed by a barbarian "+Product[Unit[Barbarian].type].name+"! "+Combat(Barbarian,ActiveUnit));
            }
         }
         Turn();
      }else{
         if (document.getElementById('p'+Row+'_'+Col).src=="u.png"){
		    Unit[ActiveUnit].destinationRow = Row;
		    Unit[ActiveUnit].destinationCol = Col;
		    Turn();
         }else{
            RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
         }
      }
   }
}

for (Row=0; Row<MaxRow; Row++){
   for (Col=0; Col<MaxCol; Col++){
   	  document.write('<img src=u.png id=p', Row,'_', Col,' onclick="i(', Row, ',', Col, ')" onmouseover="MessageBox.OnHover(', Row, ',', Col, ', this);" />');
   }
   document.writeln("<br>");
}
GenerateMap(Region);

/* Preload images */
for (X=Ocean; X<=Mountains; X++){
   document.write("<img style='display:none' src="+Terrain[X].symbol+".png />");
}
document.write("<img style='display:none' src=city_player.png />");

for (Col=0; Col<StealthFighter-1; Col++){
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_player.png />");
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_focus.png />");
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_enemy.png />");
}

for (Row=0; Row<7; Row++){
   for (Col=0; Col<MaxCol; Col++){
      document.getElementById('p'+Row+"_"+Col).src = "u.png";
   }
}


for (Row=StartRow-1; Row<=StartRow+1; Row++){
   for (Col=StartCol-1; Col<=StartCol+2; Col++){
      document.getElementById('p'+Row+"_"+Col).src = Terrain[Region[Row][Col].terrain].symbol+".png";
   }
}

document.getElementById('p'+StartRow+"_"+StartCol).src = "settler_player.png";
document.getElementById('p'+StartRow+"_"+(StartCol+1)).src = "warrior_player.png";
Unit[0] = {type: Settler, row: StartRow, col: StartCol, movement: 1, active: true, player: true, city: -1, health: 10, TroopshipClass: Boat, veterancy:1};
Unit[1] = {type: Warrior, row: StartRow, col: StartCol+1, movement: 1, active: true, player: true, city: -1, health: 10, TroopshipClass: Boat, veterancy:1};
Region[StartRow][StartCol].unit = 0;
Region[StartRow][StartCol+1].unit = 1;

NextTech();
Turn();

</script>
<form><input type="button" value="Resume" onClick="ActiveUnit=0; for (U=0; U<Unit.length; U++){Unit[U].active=true;}; Turn();"></form>
</body>
</html>

