<html><title>Civ 0--Civilization: Year 0, a JavaScript open-source implementation of a civilization-style game</title>
<body id="body" onload="MessageBox.OnResize()" onresize="MessageBox.OnResize()" style="min-width: 600px; min-height: 510px; height: 100%;  margin: 0px;">
<div id="toolbar" style="font-size: 16px; color: black; background-color: white; padding 2px; position: fixed; left: 0px; right: 0px; bottom: 0px; height: 30px; vertical-align: middle; max-width: 600px;">
<div id="message" style="float: left;"></div>
<form><input id="resumeButton" type="button" style="float: right" value="Resume" onClick="ActiveUnit=0; for (U=0; U<Unit.length; U++){Unit[U].active=true;Unit[U].destinationRow=-1}; Turn();"></form>
</div>
<script type="text/javascript">

var Debug = 1;

var Year = 0;
var ManhattanProjectBuilt = false;

function Rand(X){
   return(Math.floor(Math.random()*X+1));
}

function Distance(Row1, Col1, Row2, Col2){
   return Math.sqrt(Math.pow(Row1-Row2,2)+Math.pow(Col1-Col2,2));
}

var Terrain = new Array();
Ocean = 0;
Terrain[Ocean] = {name: "Ocean", symbol: "o", food: 1, production: 0, trade: 2, movementCost: 1, defense: 1};
Glacier = 1;
Terrain[Glacier] = {name: "Glacier", symbol: "c", food: 0, production: 0, trade: 0, movementCost: 2, defense: 1};
Tundra = 2;
Terrain[Tundra] = {name: "Tundra", symbol: "t", food: 1, production: 0, trade: 0, movementCost: 1, defense: 1};
Plains = 3;
Terrain[Plains] = {name: "Plains", symbol: "p", food: 1, production: 1, trade: 0, movementCost: 1, defense: 1};
Grassland = 4;
Terrain[Grassland] = {name: "Grassland", symbol: "g", food: 2, production: 0, trade: 0, movementCost: 1, defense: 1};
Forest = 5;
Terrain[Forest] = {name: "Forest", symbol: "f", food: 1, production: 2, trade: 0, movementCost: 2, defense: 1.5};
Swamp = 6;
Terrain[Swamp] = {name: "Swamp", symbol: "s", food: 1, production: 0, trade: 0, movementCost: 2, defense: 1.5};
Jungle = 7;
Terrain[Jungle] = {name: "Jungle", symbol: "j", food: 1, production: 0, trade: 0, movementCost: 3, defense: 1.5};
Desert = 8;
Terrain[Desert] = {name: "Desert", symbol: "d", food: 0, production: 1, trade: 0, movementCost: 1, defense: 1};
Hills = 9;
Terrain[Hills] = {name: "Hills", symbol: "h", food: 1, production: 0, trade: 0, movementCost: 2, defense: 2};
Mountains = 10;
Terrain[Mountains] = {name: "Mountain", symbol: "m", food: 0, production: 1, trade: 0, movementCost: 3, defense: 3};
TerrainSymbol = new Array();
for (X=Ocean; X<=Mountains; X++){
   TerrainSymbol[Terrain[X].symbol] = X;
   //alert(X + ", '" + Terrain[X].symbol + "', " + TerrainSymbol[Terrain[X].symbol]);
}

// Technology can affect these global variables
var HealingRate = 1;
var LostAtSeaLikelihood = 25;

var Tech = new Array();
AdvancedFlight = 1;
Alphabet = 2;
AmphibiousWarfare = 3;
Astronomy = 4;
AtomicTheory = 5;
Automobile = 6;
Banking = 7;
BridgeBuilding = 8;
BronzeWorking = 9;
CeremonialBurial = 10;
Chemistry = 11;
Chivalry = 12;
CityBuilding = 13;
CodeofLaws = 14;
CombinedArms = 15;
Combustion = 16;
Communism = 17;
Computers = 18;
Conscription = 19;
Construction = 20;
Currency = 21;
Democracy = 22;
Economics = 23;
Electricity = 24;
Electronics = 25;
Engineering = 26;
Environmentalism = 27;
Espionage = 28;
Explosives = 29;
Feudalism = 30;
Flight = 31;
Fundamentalism = 32;
FutureTech = 33;
FusionPower = 34;
GeneticEngineering = 35;
GuerillaWarfare = 36;
Gunpowder = 37;
HorsebackRiding = 38;
Industrialization = 39;
Invention = 40;
IronWorking = 41;
LaborUnion = 42;
Laser = 43;
Leadership = 44;
Literacy = 45;
MachineTools = 46;
Magnetism = 47;
MapMaking = 48;
Masonry = 49;
MassProduction = 50;
Mathematics = 51;
Medicine = 52;
Metallurgy = 53;
Miniaturization = 54;
MobileWarfare = 55;
Monarchy = 56;
Monotheism = 57;
Mysticism = 58;
Navigation = 59;
NuclearFission = 60;
NuclearPower = 61;
Philosophy = 62;
Physics = 63;
Plastics = 64;
Polytheism = 65;
Pottery = 66;
Radio = 67;
Railroad = 68;
Recycling = 69;
Refining = 70;
Refrigeration = 71;
Robotics = 72;
Rocketry = 73;
Sanitation = 74;
Seafaring = 75;
SpaceFlight = 76;
Stealth = 77;
SteamEngine = 78;
Steel = 79;
Superconductors = 80;
Tactics = 81;
TheCorporation = 82;
TheRepublic = 83;
TheWheel = 84;
Theology = 85;
TheoryofGravity = 86;
Trade = 87;
University = 88;
WarriorCode = 89;
Writing = 90;
MaxTech = Writing;
Tech[AdvancedFlight] = {name: 'Advanced Flight', prereq1: Radio, prereq2: MachineTools, playerOwned: false, AIOwned: false, code: ""};
Tech[Alphabet] = {name: 'Alphabet', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[AmphibiousWarfare] = {name: 'Amphibious Warfare', prereq1: Navigation, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Astronomy] = {name: 'Astronomy', prereq1: Mysticism, prereq2: Mathematics, playerOwned: false, AIOwned: false, code: ""};
Tech[AtomicTheory] = {name: 'Atomic Theory', prereq1: TheoryofGravity, prereq2: Physics, playerOwned: false, AIOwned: false, code: ""};
Tech[Automobile] = {name: 'Automobile', prereq1: Combustion, prereq2: Steel, playerOwned: false, AIOwned: false, code: ""};
Tech[Banking] = {name: 'Banking', prereq1: Trade, prereq2: TheRepublic, playerOwned: false, AIOwned: false, code: ""};
Tech[BridgeBuilding] = {name: 'Bridge Building', prereq1: IronWorking, prereq2: Construction, playerOwned: false, AIOwned: false, code: ""};
Tech[BronzeWorking] = {name: 'Bronze Working', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[CeremonialBurial] = {name: 'Ceremonial Burial', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Chemistry] = {name: 'Chemistry', prereq1: University, prereq2: Medicine, playerOwned: false, AIOwned: false, code: ""};
Tech[Chivalry] = {name: 'Chivalry', prereq1: Feudalism, prereq2: HorsebackRiding, playerOwned: false, AIOwned: false, code: ""};
Tech[CityBuilding] = {name: 'City Building', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: true, AIOwned: true, code: ""};
Tech[CodeofLaws] = {name: 'Code of Laws', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[CombinedArms] = {name: 'Combined Arms', prereq1: MobileWarfare, prereq2: AdvancedFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Combustion] = {name: 'Combustion', prereq1: Refining, prereq2: Explosives, playerOwned: false, AIOwned: false, code: ""};
Tech[Communism] = {name: 'Communism', prereq1: Philosophy, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[Computers] = {name: 'Computers', prereq1: MassProduction, prereq2: Miniaturization, playerOwned: false, AIOwned: false, code: ""};
Tech[Conscription] = {name: 'Conscription', prereq1: Democracy, prereq2: Metallurgy, playerOwned: false, AIOwned: false, code: "HealingRate=3;"};
Tech[Construction] = {name: 'Construction', prereq1: Masonry, prereq2: Currency, playerOwned: false, AIOwned: false, code: ""};
Tech[Currency] = {name: 'Currency', prereq1: BronzeWorking, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Democracy] = {name: 'Democracy', prereq1: Banking, prereq2: Invention, playerOwned: false, AIOwned: false, code: ""};
Tech[Economics] = {name: 'Economics', prereq1: Banking, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Electricity] = {name: 'Electricity', prereq1: Metallurgy, prereq2: Magnetism, playerOwned: false, AIOwned: false, code: ""};
Tech[Electronics] = {name: 'Electronics', prereq1: TheCorporation, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Engineering] = {name: 'Engineering', prereq1: TheWheel, prereq2: Construction, playerOwned: false, AIOwned: false, code: ""};
Tech[Environmentalism] = {name: 'Environmentalism', prereq1: Recycling, prereq2: SpaceFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Espionage] = {name: 'Espionage', prereq1: Communism, prereq2: Democracy, playerOwned: false, AIOwned: false, code: ""};
Tech[Explosives] = {name: 'Explosives', prereq1: Gunpowder, prereq2: Chemistry, playerOwned: false, AIOwned: false, code: ""};
Tech[Feudalism] = {name: 'Feudalism', prereq1: WarriorCode, prereq2: Monarchy, playerOwned: false, AIOwned: false, code: "HealingRate=2;"};
Tech[Flight] = {name: 'Flight', prereq1: Combustion, prereq2: TheoryofGravity, playerOwned: false, AIOwned: false, code: ""};
Tech[Fundamentalism] = {name: 'Fundamentalism', prereq1: Theology, prereq2: Conscription, playerOwned: false, AIOwned: false, code: ""};
Tech[FutureTech] = {name: 'Future Tech', prereq1: Stealth, prereq2: Plastics, playerOwned: false, AIOwned: false, code: "Tech[FutureTech].playerOwned = false; Tech[FutureTech].AIOwned= false;"};
Tech[FusionPower] = {name: 'Fusion Power', prereq1: NuclearPower, prereq2: Superconductors, playerOwned: false, AIOwned: false, code: ""};
Tech[GeneticEngineering] = {name: 'Genetic Engineering', prereq1: Medicine, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[GuerillaWarfare] = {name: 'Guerilla Warfare', prereq1: Communism, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Gunpowder] = {name: 'Gunpowder', prereq1: Invention, prereq2: IronWorking, playerOwned: false, AIOwned: false, code: ""};
Tech[HorsebackRiding] = {name: 'Horseback Riding', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Industrialization] = {name: 'Industrialization', prereq1: Railroad, prereq2: Banking, playerOwned: false, AIOwned: false, code: "TroopshipClass=ModernTransport;"};
Tech[Invention] = {name: 'Invention', prereq1: Engineering, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[IronWorking] = {name: 'Iron Working', prereq1: BronzeWorking, prereq2: WarriorCode, playerOwned: false, AIOwned: false, code: ""};
Tech[LaborUnion] = {name: 'Labor Union', prereq1: MassProduction, prereq2: GuerillaWarfare, playerOwned: false, AIOwned: false, code: ""};
Tech[Laser] = {name: 'Laser', prereq1: MassProduction, prereq2: NuclearPower, playerOwned: false, AIOwned: false, code: ""};
Tech[Leadership] = {name: 'Leadership', prereq1: Chivalry, prereq2: Gunpowder, playerOwned: false, AIOwned: false, code: ""};
Tech[Literacy] = {name: 'Literacy', prereq1: Writing, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[MachineTools] = {name: 'Machine Tools', prereq1: Steel, prereq2: Tactics, playerOwned: false, AIOwned: false, code: ""};
Tech[Magnetism] = {name: 'Magnetism', prereq1: IronWorking, prereq2: Physics, playerOwned: false, AIOwned: false, code: "TroopshipClass=Galleon; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[MapMaking] = {name: 'Map Making', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: "TroopshipClass=Trireme; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[Masonry] = {name: 'Masonry', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[MassProduction] = {name: 'Mass Production', prereq1: Automobile, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[Mathematics] = {name: 'Mathematics', prereq1: Alphabet, prereq2: Masonry, playerOwned: false, AIOwned: false, code: ""};
Tech[Medicine] = {name: 'Medicine', prereq1: Philosophy, prereq2: Trade, playerOwned: false, AIOwned: false, code: ""};
Tech[Metallurgy] = {name: 'Metallurgy', prereq1: Gunpowder, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Miniaturization] = {name: 'Miniaturization', prereq1: MachineTools, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[MobileWarfare] = {name: 'Mobile Warfare', prereq1: Automobile, prereq2: Tactics, playerOwned: false, AIOwned: false, code: "HealingRate=4;"};
Tech[Monarchy] = {name: 'Monarchy', prereq1: CeremonialBurial, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[Monotheism] = {name: 'Monotheism', prereq1: Philosophy, prereq2: Polytheism, playerOwned: false, AIOwned: false, code: ""};
Tech[Mysticism] = {name: 'Mysticism', prereq1: CeremonialBurial, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Navigation] = {name: 'Navigation', prereq1: Seafaring, prereq2: Astronomy, playerOwned: false, AIOwned: false, code: "TroopshipClass=Caravel; LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[NuclearFission] = {name: 'Nuclear Fission', prereq1: MassProduction, prereq2: AtomicTheory, playerOwned: false, AIOwned: false, code: ""};
Tech[NuclearPower] = {name: 'Nuclear Power', prereq1: NuclearFission, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[Philosophy] = {name: 'Philosophy', prereq1: Mysticism, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[Physics] = {name: 'Physics', prereq1: Literacy, prereq2: Navigation, playerOwned: false, AIOwned: false, code: ""};
Tech[Plastics] = {name: 'Plastics', prereq1: Refining, prereq2: SpaceFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[Polytheism] = {name: 'Polytheism', prereq1: HorsebackRiding, prereq2: CeremonialBurial, playerOwned: false, AIOwned: false, code: ""};
Tech[Pottery] = {name: 'Pottery', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Radio] = {name: 'Radio', prereq1: Flight, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Railroad] = {name: 'Railroad', prereq1: SteamEngine, prereq2: BridgeBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Recycling] = {name: 'Recycling', prereq1: MassProduction, prereq2: Democracy, playerOwned: false, AIOwned: false, code: ""};
Tech[Refining] = {name: 'Refining', prereq1: Chemistry, prereq2: TheCorporation, playerOwned: false, AIOwned: false, code: ""};
Tech[Refrigeration] = {name: 'Refrigeration', prereq1: Sanitation, prereq2: Electricity, playerOwned: false, AIOwned: false, code: ""};
Tech[Robotics] = {name: 'Robotics', prereq1: MobileWarfare, prereq2: Computers, playerOwned: false, AIOwned: false, code: ""};
Tech[Rocketry] = {name: 'Rocketry', prereq1: AdvancedFlight, prereq2: Electronics, playerOwned: false, AIOwned: false, code: ""};
Tech[Sanitation] = {name: 'Sanitation', prereq1: Engineering, prereq2: Medicine, playerOwned: false, AIOwned: false, code: ""};
Tech[Seafaring] = {name: 'Seafaring', prereq1: Pottery, prereq2: MapMaking, playerOwned: false, AIOwned: false, code: "LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;"};
Tech[SpaceFlight] = {name: 'Space Flight', prereq1: Computers, prereq2: Rocketry, playerOwned: false, AIOwned: false, code: ""};
Tech[Stealth] = {name: 'Stealth', prereq1: Superconductors, prereq2: AdvancedFlight, playerOwned: false, AIOwned: false, code: ""};
Tech[SteamEngine] = {name: 'Steam Engine', prereq1: Physics, prereq2: Invention, playerOwned: false, AIOwned: false, code: ""};
Tech[Steel] = {name: 'Steel', prereq1: Electricity, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[Superconductors] = {name: 'Superconductors', prereq1: NuclearPower, prereq2: Laser, playerOwned: false, AIOwned: false, code: ""};
Tech[Tactics] = {name: 'Tactics', prereq1: Conscription, prereq2: Leadership, playerOwned: false, AIOwned: false, code: ""};
Tech[TheCorporation] = {name: 'The Corporation', prereq1: Economics, prereq2: Industrialization, playerOwned: false, AIOwned: false, code: ""};
Tech[TheRepublic] = {name: 'The Republic', prereq1: CodeofLaws, prereq2: Literacy, playerOwned: false, AIOwned: false, code: ""};
Tech[TheWheel] = {name: 'The Wheel', prereq1: HorsebackRiding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Theology] = {name: 'Theology', prereq1: Feudalism, prereq2: Monotheism, playerOwned: false, AIOwned: false, code: ""};
Tech[TheoryofGravity] = {name: 'Theory of Gravity', prereq1: Astronomy, prereq2: University, playerOwned: false, AIOwned: false, code: ""};
Tech[Trade] = {name: 'Trade', prereq1: Currency, prereq2: CodeofLaws, playerOwned: false, AIOwned: false, code: ""};
Tech[University] = {name: 'University', prereq1: Mathematics, prereq2: Philosophy, playerOwned: false, AIOwned: false, code: ""};
Tech[WarriorCode] = {name: 'Warrior Code', prereq1: CityBuilding, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};
Tech[Writing] = {name: 'Writing', prereq1: Alphabet, prereq2: CityBuilding, playerOwned: false, AIOwned: false, code: ""};

CurrentTech = CityBuilding;
CurrentTechCost = 0;
TechReserve = 0;
TechCount = 0;
TradeReserve = 0;

var Product = new Array();
/* Units */
Settler = 1; Product[Settler] = {type: 'unit', name: 'Settler', imgStub: 'settler', prereq: CityBuilding, cost: 40, upkeep: 1, kind: 'land', class: 'EI', mobility: 1, attack: 0, defense: 1, health: 10, firepower: 1, help: 'Attack: 0, defense: 1, mobility: 1, 10 hp, 1 fp', obsolete: false};
Warrior = 2; Product[Warrior] = {type: 'unit', name: 'Warrior', imgStub: 'warrior', prereq: CityBuilding, cost: 10, upkeep: 1, kind: 'land', class: 'EI', mobility: 1, attack: 1, defense: 1, health: 10, firepower: 1, help: 'Attack: 1, defense: 1, mobility: 1, 10 hp, 1 fp', obsolete: false};
Horseman = 3; Product[Horseman] = {type: 'unit', name: 'Horseman', imgStub: 'horseman', prereq: HorsebackRiding, cost: 20, upkeep: 1, kind: 'land', class: 'EC', mobility: 2, attack: 2, defense: 1, health: 10, firepower: 1, help: 'Attack: 2, defense: 1, mobility: 2, 10 hp, 1 fp', obsolete: false};
Archer = 4; Product[Archer] = {type: 'unit', name: 'Archer', imgStub: 'archer', prereq: WarriorCode, cost: 30, upkeep: 1, kind: 'land', class: 'EI', mobility: 1, attack: 3, defense: 2, health: 10, firepower: 1, help: 'Attack: 3, defense: 2, mobility: 1, 10 hp, 1 fp', obsolete: false};
Phalanx = 5; Product[Phalanx] = {type: 'unit', name: 'Phalanx', imgStub: 'phalanx', prereq: BronzeWorking, cost: 20, upkeep: 1, kind: 'land', class: 'HI', mobility: 1, attack: 1, defense: 2, health: 10, firepower: 1, help: 'Attack: 1, defense: 2, mobility: 1, 10 hp, 1 fp', obsolete: false};
Chariot = 6; Product[Chariot] = {type: 'unit', name: 'Chariot', imgStub: 'chariot', prereq: TheWheel, cost: 30, upkeep: 1, kind: 'land', class: 'EC', mobility: 2, attack: 3, defense: 1, health: 10, firepower: 1, help: 'Attack: 3, defense: 1, mobility: 2, 10 hp, 1 fp', obsolete: false};
Catapult = 7; Product[Catapult] = {type: 'unit', name: 'Catapult', imgStub: 'catapult', prereq: Mathematics, cost: 40, upkeep: 1, kind: 'land', class: 'SE', mobility: 1, attack: 6, defense: 1, health: 10, firepower: 1, help: 'Attack: 6, defense: 1, mobility: 1, 10 hp, 1 fp', obsolete: false};
Legion = 8; Product[Legion] = {type: 'unit', name: 'Legion', imgStub: 'legion', prereq: IronWorking, cost: 40, upkeep: 1, kind: 'land', class: 'HI', mobility: 1, attack: 4, defense: 2, health: 10, firepower: 1, help: 'Attack: 4, defense: 2, mobility: 1, 10 hp, 1 fp', obsolete: false};
Pikeman = 9; Product[Pikeman] = {type: 'unit', name: 'Pikeman', imgStub: 'pikeman', prereq: Feudalism, cost: 20, upkeep: 1, kind: 'land', class: 'HI', mobility: 1, attack: 1, defense: 2, health: 10, firepower: 1, help: 'Attack: 1, defense: 2, mobility: 1, 10 hp, 1 fp', obsolete: false};
Knight = 10; Product[Knight] = {type: 'unit', name: 'Knight', imgStub: 'knight', prereq: Chivalry, cost: 40, upkeep: 1, kind: 'land', class: 'EC', mobility: 2, attack: 4, defense: 2, health: 10, firepower: 1, help: 'Attack: 4, defense: 2, mobility: 2, 10 hp, 1 fp', obsolete: false};
Frigate = 11; Product[Frigate] = {type: 'unit', name: 'Frigate', imgStub: 'frigate', prereq: Magnetism, cost: 50, upkeep: 1, kind: 'sea', class: 'N', mobility: 4, attack: 4, defense: 2, health: 20, firepower: 1, help: 'Attack: 4, defense: 2, mobility: 4, 20 hp, 1 fp', obsolete: false};
Ironclad = 12; Product[Ironclad] = {type: 'unit', name: 'Ironclad', imgStub: 'ironclad', prereq: SteamEngine, cost: 60, upkeep: 1, kind: 'sea', class: 'N', mobility: 4, attack: 4, defense: 4, health: 30, firepower: 1, help: 'Attack: 4, defense: 4, mobility: 4, 30 hp, 1 fp', obsolete: false};
Musketeer = 13; Product[Musketeer] = {type: 'unit', name: 'Musketeer', imgStub: 'musketeer', prereq: Gunpowder, cost: 30, upkeep: 1, kind: 'land', class: 'LI', mobility: 1, attack: 3, defense: 3, health: 20, firepower: 1, help: 'Attack: 3, defense: 3, mobility: 1, 20 hp, 1 fp', obsolete: false};
Dragoon = 14; Product[Dragoon] = {type: 'unit', name: 'Dragoon', imgStub: 'dragoon', prereq: Leadership, cost: 50, upkeep: 1, kind: 'land', class: 'EC', mobility: 2, attack: 5, defense: 2, health: 20, firepower: 1, help: 'Attack: 5, defense: 2, mobility: 2, 20 hp, 1 fp', obsolete: false};
Cannon = 15; Product[Cannon] = {type: 'unit', name: 'Cannon', imgStub: 'cannon', prereq: Metallurgy, cost: 40, upkeep: 1, kind: 'sea', class: 'SE', mobility: 1, attack: 8, defense: 1, health: 20, firepower: 1, help: 'Attack: 8, defense: 1, mobility: 1, 20 hp, 1 fp', obsolete: false};
Destroyer = 16; Product[Destroyer] = {type: 'unit', name: 'Destroyer', imgStub: 'destroyer', prereq: Electricity, cost: 60, upkeep: 1, kind: 'sea', class: 'N', mobility: 6, attack: 4, defense: 4, health: 30, firepower: 1, help: 'Attack: 4, defense: 4, mobility: 6, 30 hp, 1 fp', obsolete: false};
Rifleman = 17; Product[Rifleman] = {type: 'unit', name: 'Rifleman', imgStub: 'rifleman', prereq: Conscription, cost: 40, upkeep: 1, kind: 'land', class: 'LI', mobility: 1, attack: 4, defense: 4, health: 20, firepower: 1, help: 'Attack: 4, defense: 4, mobility: 1, 20 hp, 1 fp', obsolete: false};
Cavalry = 18; Product[Cavalry] = {type: 'unit', name: 'Cavalry', imgStub: 'cavalry', prereq: Tactics, cost: 60, upkeep: 1, kind: 'land', class: 'LC', mobility: 2, attack: 8, defense: 3, health: 20, firepower: 1, help: 'Attack: 8, defense: 3, mobility: 2, 20 hp, 1 fp', obsolete: false};
Cruiser = 19; Product[Cruiser] = {type: 'unit', name: 'Cruiser', imgStub: 'cruiser', prereq: Steel, cost: 80, upkeep: 1, kind: 'sea', class: 'N', mobility: 5, attack: 6, defense: 6, health: 30, firepower: 2, help: 'Attack: 6, defense: 6, mobility: 5, 30 hp, 2 fp', obsolete: false};
Battleship = 20; Product[Battleship] = {type: 'unit', name: 'Battleship', imgStub: 'battleship', prereq: Automobile, cost: 160, upkeep: 1, kind: 'sea', class: 'N', mobility: 4, attack: 12, defense: 12, health: 40, firepower: 2, help: 'Attack: 12, defense: 12, mobility: 4, 40 hp, 2 fp', obsolete: false};
Submarine = 21; Product[Submarine] = {type: 'unit', name: 'Submarine', imgStub: 'submarine', prereq: Combustion, cost: 50, upkeep: 1, kind: 'sea', class: 'N', mobility: 5, attack: 15, defense: 2, health: 30, firepower: 2, help: 'Attack: 15, defense: 2, mobility: 5, 30 hp, 2 fp', obsolete: false};
Artillery = 22; Product[Artillery] = {type: 'unit', name: 'Artillery', imgStub: 'artillery', prereq: MachineTools, cost: 50, upkeep: 1, kind: 'land', class: 'SE', mobility: 1, attack: 10, defense: 1, health: 20, firepower: 2, help: 'Attack: 10, defense: 1, mobility: 1, 20 hp, 2 fp', obsolete: false};
Fighter = 23; Product[Fighter] = {type: 'unit', name: 'Fighter', imgStub: 'fighter', prereq: Flight, cost: 60, upkeep: 1, kind: 'air', class: 'AF', mobility: 10, attack: 4, defense: 3, health: 20, firepower: 2, help: 'Attack: 4, defense: 3, mobility: 10, 20 hp, 2 fp', obsolete: false};
Carrier = 24; Product[Carrier] = {type: 'unit', name: 'Carrier', imgStub: 'carrier', prereq: AdvancedFlight, cost: 160, upkeep: 1, kind: 'sea', class: 'N', mobility: 5, attack: 1, defense: 9, health: 40, firepower: 2, help: 'Attack: 1, defense: 9, mobility: 5, 40 hp, 2 fp', obsolete: false};
Armor = 25; Product[Armor] = {type: 'unit', name: 'Armor', imgStub: 'armor', prereq: MobileWarfare, cost: 80, upkeep: 1, kind: 'land', class: 'LC', mobility: 3, attack: 10, defense: 5, health: 30, firepower: 1, help: 'Attack: 10, defense: 5, mobility: 3, 30 hp, 1 fp', obsolete: false};
MechInf = 26; Product[MechInf] = {type: 'unit', name: 'Mech. Inf.', imgStub: 'mech.inf.', prereq: LaborUnion, cost: 50, upkeep: 1, kind: 'land', class: 'LI', mobility: 3, attack: 6, defense: 6, health: 30, firepower: 1, help: 'Attack: 6, defense: 6, mobility: 3, 30 hp, 1 fp', obsolete: false};
Howitzer = 27; Product[Howitzer] = {type: 'unit', name: 'Howitzer', imgStub: 'howitzer', prereq: Robotics, cost: 70, upkeep: 1, kind: 'land', class: 'SE', mobility: 2, attack: 12, defense: 2, health: 30, firepower: 2, help: 'Attack: 12, defense: 2, mobility: 2, 30 hp, 2 fp', obsolete: false};
Bomber = 28; Product[Bomber] = {type: 'unit', name: 'Bomber', imgStub: 'bomber', prereq: AdvancedFlight, cost: 120, upkeep: 1, kind: 'air', class: 'AF', mobility: 8, attack: 12, defense: 1, health: 20, firepower: 2, help: 'Attack: 12, defense: 1, mobility: 8, 20 hp, 2 fp', obsolete: false};
SpyPlane = 29; Product[SpyPlane] = {type: 'unit', name: 'Spy Plane', imgStub: 'spyplane', prereq: AdvancedFlight, cost: 140, upkeep: 1, kind: 'air', class: 'AF', mobility: 16, attack: 0, defense: 1, health: 20, firepower: 1, help: 'Attack: 0, defense: 1, mobility: 16, 20 hp, 1 fp', obsolete: false};
NuclearMissile = 30; Product[NuclearMissile] = {type: 'unit', name: 'Nuclear Missile', imgStub: 'nuclearmissile', prereq: Rocketry, cost: 160, upkeep: 1, kind: 'missile', class: 'M', mobility: 16, attack: 99, defense: 0, health: 10, firepower: 1, help: 'Attack: 99, defense: 0, mobility: 16, 10 hp, 1 fp', obsolete: false};
CruiseMissile = 31; Product[CruiseMissile] = {type: 'unit', name: 'Cruise Missile', imgStub: 'cruisemissile', prereq: Rocketry, cost: 60, upkeep: 1, kind: 'missile', class: 'M', mobility: 12, attack: 18, defense: 0, health: 10, firepower: 1, help: 'Attack: 18, defense: 0, mobility: 12, 10 hp, 1 fp', obsolete: false};
StealthBomber = 32; Product[StealthBomber] = {type: 'unit', name: 'Stealth Bomber', imgStub: 'stealthbomber', prereq: Stealth, cost: 160, upkeep: 1, kind: 'air', class: 'AF', mobility: 12, attack: 18, defense: 5, health: 20, firepower: 2, help: 'Attack: 18, defense: 5, mobility: 12, 20 hp, 2 fp', obsolete: false};
StealthFighter = 33; Product[StealthFighter] = {type: 'unit', name: 'Stealth Fighter', imgStub: 'stealthfighter', prereq: Stealth, cost: 80, upkeep: 1, kind: 'air', class: 'AF', mobility: 14, attack: 8, defense: 4, health: 20, firepower: 2, help: 'Attack: 8, defense: 4, mobility: 14, 20 hp, 2 fp', obsolete: false};
var MaxUnit = StealthFighter;
/* Buildings */
Airport = 34;
Aqueduct = 35;
Bank = 36;
Barracks = 37;
Cathedral = 38;
CityWalls = 39;
CoastalDefense = 40;
Colosseum = 41;
Courthouse = 42;
Factory = 43;
Farmland = 44;
Garrison = 45;
Granary = 46;
Harbor = 47;
Houses = 48;
HydroPlant = 49;
Library = 50;
Irrigation = 51;
Marketplace = 52;
MassTransit = 53;
MfgPlant = 54;
MilitaryAcademy = 55;
Mine = 56;
NuclearPlant = 57;
OffshorePlatform = 58;
Palace = 59;
PoliceStation = 60;
PortFacility = 61;
PowerPlant = 62;
Quarry = 63;
RailroadStation = 64;
RecyclingCenter = 65;
ResearchLab = 66;
Roads = 67;
SAMBattery = 68;
SDIDefense = 69;
SewerSystem = 70;
StockExchange = 71;
SuperHighways = 72;
Supermarket = 73;
Temple = 74;
University = 75;
Wharf = 76;
Product[Airport] = {type: 'building', name: 'Airport', prereq: Radio, prebuilding: Houses, cost: 120, upkeep: 3, code: 'City[C].veterancy["air"] = 6;', help: "Increases the veterancy of newly built air units."};
Product[Aqueduct] = {type: 'building', name: 'Aqueduct', prereq: Construction, prebuilding: Houses, cost: 60, upkeep: 2, code: 'City[C].healthyCitizens += 4;', help: "Makes up to four unhealthy citizens healthy."};
Product[Bank] = {type: 'building', name: 'Bank', prereq: Banking, prebuilding: Marketplace, cost: 80, upkeep: 2, code: 'City[C].trade *= 1.333;', help: "Together with the Marketplace improvement, a Bank increases the trade points within a city by 100%."};
Product[Barracks] = {type: 'building', name: 'Barracks', prereq: CityBuilding, prebuilding: Houses, cost: 30, upkeep: 1, code: 'City[C].veterancy["land"] = 2;', help: "Increases the veterancy of newly built land units."};
Product[Cathedral] = {type: 'building', name: 'Cathedral', prereq: Monotheism, prebuilding: Houses, cost: 80, upkeep: 3, code: 'City[C].happyCitizens += 3;', help: "A Cathedral makes 3 unhappy citizens happy. The discovery of Theology increases the effect of a Cathedral, making an additional unhappy citizen happy. Under Theocracy, makes 2 additional unhappy citizens happy."};
Product[CityWalls] = {type: 'building', name: 'City Walls', prereq: Masonry, prebuilding: Houses, cost: 60, upkeep: 0, code: 'City[C].defenseAgainst["land"] = 3;', help: "City Walls make it easier to defend a city. They triple the defence strength of units within the city against ground units. They are ineffective against airborne and sea units as well as Howitzers. City Walls also prevent the loss of population which occurs when a defending unit is destroyed by a land unit."};
Product[CoastalDefense] = {type: 'building', name: 'Coastal Defense', prereq: Metallurgy, prebuilding: Wharf, cost: 60, upkeep: 1, code: 'City[C].defenseAgainst["sea"] = 2;', help: "Increases the defence strength of units within a city by a factor of 2 when defending against bombardments from enemy ships."};
Product[Colosseum] = {type: 'building', name: 'Colosseum', prereq: Construction, prebuilding: Houses, cost: 70, upkeep: 4, code: 'City[C].happyCitizens += 3;', help: "Entertains the citizens of a city, making 3 unhappy citizens happy. (Four after the discovery of Electricity.) Under a Republic, makes 2 additional unhappy citizens happy."};
Product[Courthouse] = {type: 'building', name: 'Courthouse', prereq: CodeofLaws, prebuilding: Houses, cost: 60, upkeep: 1, code: 'City[C].happyCitizens += 1; City[C].corruptionRate *= 0.5;', help: "Reduces the corruption and waste in a city by 50%. Under a Monarchy, a Courthouse makes 2 unhappy citizen happy."};
Product[Factory] = {type: 'building', name: 'Factory', prereq: Industrialization, prebuilding: Houses, cost: 140, upkeep: 4, code: 'City[C].healthyCitizens -= 2;', help: "Increases the production points in a city by 50%. May cause up to two citizens to become unhealthy."};
Product[Farmland] = {type: 'building', name: 'Farmland', prereq: Refrigeration, prebuilding: Irrigation, cost: 20, upkeep: 0, code: 'City[C].food += 3;', help: "Adds 3 food points to a city."};
Product[Garrison] = {type: 'building', name: 'Garrison', prereq: Gunpowder, prebuilding: Barracks, cost: 30, upkeep: 1, code: 'City[C].veterancy["land"] = 5;', help: "Increases the veterancy of newly built land units. Cumulative with barracks."};
Product[Granary] = {type: 'building', name: 'Granary', prereq: Pottery, prebuilding: Houses, cost: 40, upkeep: 1, code: 'City[C].food *= 2; City[C].healthyCitizens += 2;', help: "The amount of stored food will be set to half full whenever a city with a Granary shrinks or grows. This helps a city to grow faster and more easily withstand famine. Makes up to two unhealthy citizens healthy."};
Product[Harbor] = {type: 'building', name: 'Harbor', prereq: Seafaring, prebuilding: Wharf, cost: 40, upkeep: 1, code: 'City[C].food += NeighboringRegions(Row,Col,".terrain==Ocean");', help: "Adds 1 extra food point on all Sea regions in a city. The city needs to be coastal to build this improvement."};
Product[Houses] = {type: 'building', name: 'Houses', prereq: CityBuilding, prebuilding: Houses, cost: 0, upkeep: 0, code: '', help: "Base building required by all others."};
Product[HydroPlant] = {type: 'building', name: 'Hydro Plant', prereq: Electronics, prebuilding: Factory, cost: 180, upkeep: 4, code: 'City[C].production *= 1.5;', help: "Increases the production points in a city by an additional 50%."};
Product[Library] = {type: 'building', name: 'Library', prereq: Writing, prebuilding: Houses, cost: 60, upkeep: 1, code: 'City[C].science = 2;', help: "Doubles the science output of a city."};
Product[Irrigation] = {type: 'building', name: 'Irrigation', prereq: Pottery, prebuilding: Houses, cost: 20, upkeep: 0, code: 'City[C].food += 3;', help: "Adds 3 food points to a city."};
Product[Marketplace] = {type: 'building', name: 'Marketplace', prereq: Currency, prebuilding: Houses, cost: 60, upkeep: 0, code: 'City[C].trade *= 1.5;', help: "Increases the trade points in a city by 50%."};
Product[MassTransit] = {type: 'building', name: 'Mass Transit', prereq: MassProduction, prebuilding: Houses, cost: 120, upkeep: 4, code: 'City[C].trade *= 1.25;', help: "Improves the trade points of the city by 25%."};
Product[MfgPlant] = {type: 'building', name: 'Mfg. Plant', prereq: Robotics, prebuilding: Factory, cost: 220, upkeep: 6, code: 'City[C].production *= 1.5; City[C].healthyCitizens -= 3;', help: "Increases the production points in a city by an additional 50%. May cause up to three citizens to become unhealthy."};
Product[MilitaryAcademy] = {type: 'building', name: 'Military Academy', prereq: MobileWarfare, prebuilding: Houses, cost: 30, upkeep: 1, code: 'City[C].veterancy["land"] = 9;', help: "Increases the veterancy of newly built land units. Cumulative with barracks and garrison. Under Communism, makes 2 unhappy citizens happy."};
Product[Mine] = {type: 'building', name: 'Mine', prereq: IronWorking, prebuilding: Houses, cost: 20, upkeep: 0, code: 'City[C].production += 3;', help: "Adds 3 production points to a city."};
Product[NuclearPlant] = {type: 'building', name: 'Nuclear Plant', prereq: NuclearPower, prebuilding: Factory, cost: 120, upkeep: 2, code: 'City[C].production *= 1.5;', help: "Increases the production points in a city by an additional 50%."};
Product[OffshorePlatform] = {type: 'building', name: 'Offshore Platform', prereq: Miniaturization, prebuilding: Wharf, cost: 120, upkeep: 3, code: 'City[C].production += NeighboringRegions(Row,Col,".terrain==Ocean");', help: "Adds 1 extra production point on all Sea squares in a city. The city needs to be coastal to build this improvement."};
Product[Palace] = {type: 'building', name: 'Palace', prereq: Masonry, prebuilding: Houses, cost: 70, upkeep: 0, code: 'City[C].happyCitizens += 1; City[C].corruptionRate *= 0.5;', help: "Makes a city the capital and the center of your government. Corruption in other cities is related to how far away from the capital they are, except when the government is Democracy or Communism. The cost of inciting a revolt in a city also depends upon the city's distance from the capital (under all forms of government)."};
Product[PoliceStation] = {type: 'building', name: 'Police Station', prereq: Communism, prebuilding: Courthouse, cost: 50, upkeep: 2, code: 'City[C].happyCitizens += 1; City[C].corruptionRate *= 0.5;', help: "Makes one unhappy citizen happy. Under Democracy, makes 2 additional unhappy citizens happy."};
Product[PortFacility] = {type: 'building', name: 'Port Facility', prereq: AmphibiousWarfare, prebuilding: Wharf, cost: 60, upkeep: 3, code: 'City[C].veterancy["sea"] = 6;', help: "Increases the veterancy of newly built sea units."};
Product[PowerPlant] = {type: 'building', name: 'Power Plant', prereq: Refining, prebuilding: Factory, cost: 130, upkeep: 4, code: 'City[C].healthyCitizens -= 4;', help: "Increases the production points in a city by an additional 50%. May cause up to four citizens to become unhealthy."};
Product[Quarry] = {type: 'building', name: 'Quarry', prereq: Masonry, prebuilding: Houses, cost: 20, upkeep: 0, code: 'City[C].production += 3;', help: "Adds 3 production points to a city."};
Product[RailroadStation] = {type: 'building', name: 'Railroad Station', prereq: Railroad, prebuilding: Roads, cost: 20, upkeep: 0, code: 'City[C].trade += 3;', help: "Adds 3 trade points to a city."};
Product[RecyclingCenter] = {type: 'building', name: 'Recycling Center', prereq: Recycling, prebuilding: Houses, cost: 140, upkeep: 2, code: 'City[C].healthyCitizens += 2; City[C].happyCitizens += 1;', help: "Building a Recycling Center makes one unhappy citizen happy. Makes up to two unhealthy citizens healthy."};
Product[ResearchLab] = {type: 'building', name: 'Research Lab', prereq: Computers, prebuilding: Library, cost: 120, upkeep: 3, code: 'City[C].science *= 1.5;', help: "Together with a Library, a Research Lab increases the science production of a city by 200%. Together with a Library and a University, a Research Lab increases the science production of a city by 450%."};
Product[Roads] = {type: 'building', name: 'Roads', prereq: CityBuilding, prebuilding: Houses, cost: 20, upkeep: 0, code: 'City[C].trade += 3;', help: "Adds 3 trade points to a city."};
Product[SAMBattery] = {type: 'building', name: 'SAM Battery', prereq: Rocketry, prebuilding: Houses, cost: 70, upkeep: 2, code: 'City[C].defenseAgainst["air"] = 2;', help: "Doubles the defense of all units inside the city when attacked by non-nuclear air units."};
Product[SDIDefense] = {type: 'building', name: 'SDI Defense', prereq: Laser, prebuilding: Houses, cost: 140, upkeep: 4, code: 'City[C].defenseAgainst["missile"] = 3;', help: "Protects a city and its environs (up to 2 squares away) from attacks by Nuclear units. A Nuclear unit attacking a city with SDI Defense, or attacking a unit (or deliberately exploded) within range, is shot down and simply has no effect. Also, doubles defence for units in the city against non-nuclear missiles."};
Product[SewerSystem] = {type: 'building', name: 'Sewer System', prereq: Sanitation, prebuilding: Aqueduct, cost: 80, upkeep: 2, code: 'City[C].healthyCitizens += 8;', help: "Makes up to four unhealthy citizens healthy."};
Product[StockExchange] = {type: 'building', name: 'Stock Exchange', prereq: Economics, prebuilding: Bank, cost: 120, upkeep: 3, code: 'City[C].trade *= 1.25;', help: "Together with a Marketplace and a Bank, a Stock Exchange boosts trade points in a city by 150%."};
Product[SuperHighways] = {type: 'building', name: 'Super Highways', prereq: Automobile, prebuilding: Roads, cost: 120, upkeep: 3, code: 'City[C].trade *= 1.25;', help: "Increases trade resources by 25%."};
Product[Supermarket] = {type: 'building', name: 'Supermarket', prereq: Refrigeration, prebuilding: Houses, cost: 80, upkeep: 3, code: 'City[C].healthyCitizens += 2;', help: "Increases the food resources by 50% on each farmland square which is being used around the city. Farmland squares are those which have been irrigated a second time. Makes up to two unhealthy citizens healthy."};
Product[Temple] = {type: 'building', name: 'Temple', prereq: CeremonialBurial, prebuilding: Houses, cost: 30, upkeep: 1, code: 'City[C].happyCitizens += 1;', help: "Makes one unhappy citizen happy. Both the Mysticism advance and the Oracle wonder double this effect. With both Mysticism and the Oracle, 4 citizens are made happy."};
Product[University] = {type: 'building', name: 'University', prereq: University, prebuilding: Library, cost: 120, upkeep: 3, code: 'City[C].science *= 1.5;', help: "Together with a Library, a University increases the science production of a city by 250%."};
Product[Wharf] = {type: 'building', name: 'Wharf', prereq: CityBuilding, prebuilding: Houses, cost: 0, upkeep: 0, code: '', help: "Enables later seaside improvements."};
var MaxBuilding = Wharf;
var MaxProduct = Wharf;

var Troopship = new Array();
Boat = 1; Troopship[Boat] = {type: 'unit', name: 'Boat', imgStub: 'boat', prereq: CityBuilding, cost: 40, class: 'N', mobility: 1, attack: 0, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 2, obsolete: false};
Trireme = 2; Troopship[Trireme] = {type: 'unit', name: 'Trireme', imgStub: 'trireme', prereq: MapMaking, cost: 40, class: 'N', mobility: 2, attack: 1, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 2, obsolete: false};
Caravel = 3; Troopship[Caravel] = {type: 'unit', name: 'Caravel', imgStub: 'caravel', prereq: Navigation, cost: 40, class: 'N', mobility: 3, attack: 2, defense: 1, health: 10, firepower: 1, TroopshipCapacity: 3, obsolete: false};
Galleon = 4; Troopship[Galleon] = {type: 'unit', name: 'Galleon', imgStub: 'galleon', prereq: Magnetism, cost: 40, class: 'N', mobility: 4, attack: 2, defense: 2, health: 20, firepower: 1, TroopshipCapacity: 4, obsolete: false};
Transport = 5; Troopship[Transport] = {type: 'unit', name: 'Transport', imgStub: 'Transport', prereq: Industrialization, cost: 50, class: 'N', mobility: 5, attack: 2, defense: 3, health: 30, firepower: 1, TroopshipCapacity: 8, obsolete: false};
TroopshipClass = Boat;
var MaxTroopship = Transport;

/* Wonders */
var Wonder = new Array();
AdamSmithsTradingCo = 1; Wonder[AdamSmithsTradingCo] = {name: "Adam Smith's Trading Co.", prereq: Economics, obsoleteBy: FutureTech, cost: 400, code: 'BuildInEveryCity(Marketplace); BuildInEveryCity(Bank);', help: "Builds a Marketplace and a Bank in each of your cities that lacks one."};
ApolloProgram = 2; Wonder[ApolloProgram] = {name: "Apollo Program", prereq: SpaceFlight, obsoleteBy: FutureTech, cost: 600, code: 'UpdateEntireMap();', help: "Reveals the entire world in its current state to the player."};
Colossus = 3; Wonder[Colossus] = {name: "Colossus", prereq: BronzeWorking, obsoleteBy: Flight, cost: 100, code: 'ForCitiesWith(Wharf,"City[C].production *= 1.33;")', help: "Boosts trade in each seaside city by 33%."};
CopernicusObservatory = 4; Wonder[CopernicusObservatory] = {name: "Copernicus' Observatory", prereq: Astronomy, obsoleteBy: SpaceFlight, cost: 200, code: 'ForCitiesWith(Temple,"City[C].science *= 1.33;")', help: "Boosts science in each city with a Temple by 33%."};
CureForCancer = 5; Wonder[CureForCancer] = {name: "Cure For Cancer", prereq: GeneticEngineering, obsoleteBy: FutureTech, cost: 600, code: 'ForCitiesWith(Houses,"City[C].happyCitizens++; City[C].healthyCitizens++;")', help: "This stunning technological achievement makes one unhealthy citizen healthy in each city and makes one unhappy citizen happy."};
DarwinsVoyage = 6; Wonder[DarwinsVoyage] = {name: "Darwin's Voyage", prereq: Magnetism, obsoleteBy: Flight, cost: 300, code: 'BuildInEveryCity(University);', help: "Builds a University in each of your cities that lacks one."};
EiffelTower = 7; Wonder[EiffelTower] = {name: "Eiffel Tower", prereq: Radio, obsoleteBy: FutureTech, cost: 100, code: 'ForCitiesWith(Houses,"City[C].happyCitizens++;")', help: "Makes one unhappy citizen happy in every city."};
GreatLibrary = 8; Wonder[GreatLibrary] = {name: "Great Library", prereq: Literacy, obsoleteBy: Electricity, cost: 300, code: 'BuildInEveryCity(Library);', help: "Build a Library in each of your cities that lacks one."};
GreatWall = 9; Wonder[GreatWall] = {name: "Great Wall", prereq: Masonry, obsoleteBy: Metallurgy, cost: 300, code: 'BuildInEveryCity(CityWalls); PeaceInOurTime();', help: "Builds a City Wall in each of your cities that lacks one. All enemy units cease attacks and become inactive."};
HangingGardens = 10; Wonder[HangingGardens] = {name: "Hanging Gardens", prereq: Pottery, obsoleteBy: Railroad, cost: 200, code: 'ForCitiesWith(Houses,"City[C].happyCitizens++; City[C].healthyCitizens++;")', help: "Makes one unhappy citizen happy in every city. Makes up to one unhealthy citizen healthy in each city."};
HooverDam = 11; Wonder[HooverDam] = {name: "Hoover Dam", prereq: Electronics, obsoleteBy: FutureTech, cost: 600, code: 'BuildInEveryCity(HydroPlant);', help: "Builds a Hydro Plant in each of your cities that lacks one."};
IsaacNewtonsCollege = 12; Wonder[IsaacNewtonsCollege] = {name: "Isaac Newton's College", prereq: TheoryofGravity, obsoleteBy: NuclearFission, cost: 300, code: 'ForCitiesWith(University,"City[C].science *= 2;")', help: "Boosts science in each city with a University by 100%."};
KingRichardsCrusade = 13; Wonder[KingRichardsCrusade] = {name: "King Richard's Crusade", prereq: Engineering, obsoleteBy: Communism, cost: 150, code: 'ForCitiesWith(Cathedral,"City[C].production *= 1.25;")', help: "Boosts production points by 25% for each city with a Cathedral."};
LeonardosWorkshop = 14; Wonder[LeonardosWorkshop] = {name: "Leonardo's Workshop", prereq: Invention, obsoleteBy: Automobile, cost: 400, code: 'ForCitiesWith(ResearchLab,"City[C].science *= 1.5;")', help: "Boosts science in each city with a Library by 50%."};
GreatLighthouse = 15; Wonder[GreatLighthouse] = {name: "Great Lighthouse", prereq: MapMaking, obsoleteBy: Magnetism, cost: 200, code: 'LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;', help: "Reduces the likelihood of getting lost at sea."};
MagellansExpedition = 16; Wonder[MagellansExpedition] = {name: "Magellan's Expedition", prereq: Navigation, obsoleteBy: FutureTech, cost: 400, code: 'UpdateEntireMap(); LostAtSeaLikelihood = LostAtSeaLikelihood*2/3;', help: "Reduces the likelihood of getting lost at sea. Reveals the entire world in its current state to the player."};
ManhattanProject = 17; Wonder[ManhattanProject] = {name: "Manhattan Project", prereq: NuclearFission, obsoleteBy: FutureTech, cost: 600, code: 'ManhattanProjectBuilt = true;', help: "Allows all players with knowledge of Rocketry to build Nuclear units."};
MarcoPolosTravels = 18; Wonder[MarcoPolosTravels] = {name: "Marco Polo's Travels", prereq: Trade, obsoleteBy: Railroad, cost: 200, code: 'ForCitiesWith(Houses,"City[C].trade *= 1.333;")', help: "Boosts trade in each city by 33%."};
MichelangelosChapel = 19; Wonder[MichelangelosChapel] = {name: "Michelangelo's Chapel", prereq: Monotheism, obsoleteBy: FutureTech, cost: 400, code: 'BuildInEveryCity(Cathedral);', help: "Builds a Cathedral in each of your cities that lacks one."};
Oracle = 20; Wonder[Oracle] = {name: "Oracle", prereq: Mysticism, obsoleteBy: Theology, cost: 100, code: 'ForCitiesWith(Temple,"City[C].happyCitizens += 2;")', help: "Makes two of your unhappy citizens content in every city with a Temple."};
OrbitalColony = 21; Wonder[OrbitalColony] = {name: "Orbital Colony", prereq: Superconductors, obsoleteBy: FutureTech, cost: 800, code: 'alert("You won the game in "+Year+" turns. Congratulations! You can keep playing for the fun of it.");', help: "The first player to build the Orbital Colony wonder wins the game!"};
Pyramids = 22; Wonder[Pyramids] = {name: "Pyramids", prereq: Masonry, obsoleteBy: Engineering, cost: 200, code: 'BuildInEveryCity(Granary);', help: "Builds a Granary in each of your cities that lacks one."};
SETIProgram = 23; Wonder[SETIProgram] = {name: "SETI Program", prereq: Computers, obsoleteBy: FutureTech, cost: 600, code: 'ForCitiesWith(ResearchLab,"City[C].science *= 2;")', help: "Boosts science in each city with a Research Lab by 100%."};
ShakespearesTheatre = 24; Wonder[ShakespearesTheatre] = {name: "Shakespeare's Theatre", prereq: Medicine, obsoleteBy: Radio, cost: 200, code: 'ForCitiesWith(Library,"City[C].happyCitizens++;")', help: "Makes one unhappy citizen happy in each city with a Library."};
StatueofLiberty = 25; Wonder[StatueofLiberty] = {name: "Statue of Liberty", prereq: Democracy, obsoleteBy: FutureTech, cost: 400, code: 'ForCitiesWith(Houses,"City[C].citizens++;")', help: "Adds one citizen to each of your cities."};
SunTzusWarAcademy = 26; Wonder[SunTzusWarAcademy] = {name: "Sun Tzu's War Academy", prereq: Feudalism, obsoleteBy: Gunpowder, cost: 300, code: 'BuildInEveryCity(Barracks); BuildInEveryCity(Garrison);', help: "Builds a Barracks and Garrison in each of your cities that lacks one."};
UnitedNations = 27; Wonder[UnitedNations] = {name: "United Nations", prereq: Communism, obsoleteBy: FutureTech, cost: 600, code: 'PeaceInOurTime();', help: "All enemy units cease attacks and become inactive."};
WomensSuffrage = 28; Wonder[WomensSuffrage] = {name: "Women's Suffrage", prereq: Industrialization, obsoleteBy: FutureTech, cost: 600, code: 'ForCitiesWith(Houses,"City[C].production *= 1.25;")', help: "Boosts production points by 25% for each city."};
MaxWonder = WomensSuffrage;
for (W=1; W<MaxWonder; W++){
   Wonder[W].player = false;
}
CurrentWonder = 0;
CurrentWonderCost = 1;

MaxRow = 24;
MaxCol = 30; //prompt("How wide a world is it?","30");
StartRow = 0;
StartCol = 0;

var Region = new Array();
TerrainProbability = new Array("ttc","ttttc", "tppp", "pppgfs", "gfs", "jjsgg", "jjjssg", "gggd", "dddgg");

var City = new Array();

var Unit = new Array();


/* Techs */

function SetTechHelp(){
   for (T=1; T<MaxTech; T++){
      Tech[T].help = "Enables ";
   }
   for (U=1; U<MaxUnit; U++){
      Tech[Product[U].prereq].help += Product[U].name + ", ";
   }
   for (U=Troopship; U<MaxTroopship; U++){
      Tech[Troopship[U].prereq].help += Troopship[U].name + ", ";
   }
   for (B=MaxUnit+1; B<MaxProduct; B++){
      Tech[Product[B].prereq].help += Product[B].name + ", ";
   }
   for (W=1; W<MaxWonder; W++){
      Tech[Wonder[W].prereq].help += Wonder[W].name + ", ";
   }
   for (T=1; T<MaxTech; T++){
      Tech[Tech[T].prereq1].help += Tech[T].name + ", ";
      Tech[Tech[T].prereq2].help += Tech[T].name + ", ";
   }
   for (T=1; T<MaxTech; T++){
      S = String(Tech[T].code);
      if (S.indexOf("HealingRate")!=-1){
         Tech[T].help += "faster healing, ";
      }
      if (S.indexOf("LostAtSeaLikelihood")!=-1){
         Tech[T].help += "safer sailing, ";
      }
      if (Tech[T].help=="Enables "){
         Tech[T].help = "No benefits";
      }else{
         Tech[T].help = Tech[T].help.substr(0,Tech[T].help.length-2);
      }
      //document.writeln(Tech[T].name, " - ", Tech[T].help, "<br>");
   }
}


/* Regions */

function TerrainAtLatitude(Row){
   switch (Rand(20)){
      case 1: return Mountains; break;
      case 2: return Hills; break;
      default:
         Latitude = Math.floor(Row/MaxRow*17);
         if (Latitude>8){Latitude = 17-Latitude};
         Choices = String(TerrainProbability[Latitude]);
         Choice = Choices.charAt(Rand(Choices.length)-1);
         //if (Debug){Debug = confirm(Choice + ": " + TerrainSymbol[Choice] + ". Continue debugging?");}
         return TerrainSymbol[Choice];
   }
}

function RegionImage(Row, Col, focus){
   var R;
   var S = 'p'+Row+'_'+Col;
   var U = Region[Row][Col].unit;
   if ((U!=-1)&&(Unit[U] !== undefined)){
      var T;
      if (Unit[U].player){
         if (focus){
            T = "focus";
            document.getElementById(S).focus();
         }else{
            T = "player";
         }
      }else{
         T = "enemy";
      }
      if (Region[Row][Col].terrain!=Ocean){
         document.getElementById(S).src=Product[Unit[U].type].imgStub+"_"+T+".png";
         R = Product[Unit[U].type].name;
      }else{
         document.getElementById(S).src=Troopship[Unit[U].TroopshipClass].imgStub+"_"+T+".png";
         R = Troopship[Unit[U].TroopshipClass].name+" (carrying "+Product[Unit[U].type].name+")";
      }
      R += ", health "+Unit[U].health+", "+(Math.floor(100*Terrain[Region[Unit[U].row][Unit[U].col].terrain].defense))+"% defense";
      R += ", "+Math.floor(100*Unit[U].veterancy-100)+"% veterancy";
      document.getElementById(S).title = R;
   }else{
      if(Region[Row][Col].city!=-1){
         document.getElementById(S).src="city_player.png";
         document.getElementById(S).title = CityDescription(Region[Row][Col].city,true);
      }else{
         var T=Region[Row][Col].terrain;
         document.getElementById(S).src=Terrain[T].symbol+".png";
         document.getElementById(S).title = Terrain[T].name+", "+Math.floor(100*Terrain[T].defense)+"% defense";
      }
   }
   return(document.getElementById(S).title);
}


function RegionTitle(Row, Col, Title){
   var S = 'p'+Row+'_'+Col;
   document.getElementById(S).title = Title;
}

function GenerateMap(Region){

   for (Row=-1; Row<=MaxRow+1; Row++){
      Region[Row] = new Array();
   }

   // sea by default
   for (Row=-1; Row<=MaxRow+1; Row++){
      for (Col=-1; Col<=MaxCol+1; Col++){
         Region[Row][Col] = {terrain: Ocean, unit: -1, city: -1};
      }
   }
   // glaciers
   for (Col=-1; Col<MaxCol+1; Col++){
      Region[0][Col].terrain = Glacier;
      if (Rand(3)==1){
         Region[1][Col].terrain = Glacier;
      }
      if (Rand(6)==1){
         Region[MaxRow-2][Col].terrain = Glacier;
      }
	  Region[MaxRow-1][Col].terrain = Glacier;
   }


   Land1 = Rand(6)+5;
   LandEnd1 = Land1+Rand(5)+Rand(5);
   LandOffset2 = Rand(6)+10;
   Land2 = LandEnd1+LandOffset2;
   LandEnd2 = Math.min(Land2+Rand(5)+Rand(5),MaxCol);
   // insert a channel at the narrowest point
   NarrowestWidth = MaxCol;
   NarrowestRow = MaxRow;
   for (Row=1; Row<MaxRow-3; Row++){
      for (Col=Land1; Col<=LandEnd1; Col++){
         Region[Row][Col].terrain = TerrainAtLatitude(Row);
      }
      if (Row>Rand(4)) {
         for (Col=Land2; Col<=LandEnd2; Col++){
            Region[Row][Col].terrain = TerrainAtLatitude(Row);
         }
         if ((Row>4) & (LandEnd1-Land1>=2) & (StartRow==0)){
            StartRow = Row;
            StartCol = Land1+Rand(LandEnd1-Land1-1);
         }
      }
      Land1 = Math.max(Land1+Rand(5)-3,1);
      LandEnd1 = LandEnd1+Rand(3)-2;
      if (LandEnd1<Land1-1){
         LandEnd1=Land1+Rand(5)+5;
      	 NarrowestRow=Row;
      }
      if ((Row>3+Rand(3))&&(LandEnd1-Land1<NarrowestWidth)){
         NarrowestWidth=LandEnd1-Land1;
         NarrowestRow=Row;
      }
      Land2 = LandEnd1+LandOffset2+Rand(3)-2;
      LandEnd2 = Math.min(LandEnd2+Rand(5)-3,MaxCol);
   }
   for (Col=0; Col<MaxCol/2; Col++){
      Region[NarrowestRow][Col].terrain = Ocean;
   }

}


function NeighboringRegions(Row,Col,Code){
   var X=0;
   for (var A=-1; A<=1; A++){
      for (var B=-1; B<=1; B++){
         if(eval("Region["+(Row+A)+"]["+(Col+B)+"]"+Code)){
            X++;
         }
      }
   }
   return(X);
}


function UpdateEntireMap(){
   for (Row=0; Row<MaxRow; Row++){
      for (Col=0; Col<MaxCol; Col++){
         RegionImage(Row,Col,false);
      }
   }
}


/* Units */
function UnitString(){
   var S=Product[Unit[0].type].name;
   for (U=1; U<Unit.length; U++){
      S = S + ", " + Product[Unit[U].type].name;
   }
   return(S);
}

function DeleteUnit(U){
   //alert("["+Unit[U].row+","+Unit[U].col+"]");
   Region[Unit[U].row][Unit[U].col].unit = -1;
   RegionImage(Unit[U].row,Unit[U].col,false);
   //alert(UnitString());
   if(U<Unit.length-1){
      if (ActiveUnit==U) {ActiveUnit = Unit.length-2};
      Unit[U] = Unit[Unit.length-1];
      Region[Unit[U].row][Unit[U].col].unit = U;
      //RegionImage(Unit[U].row,Unit[U].col,false);
      //alert("["+Unit[U].row+","+Unit[U].col+"].unit="+Region[Unit[U].row][Unit[U].col].unit);
      Unit.pop();
   }else{
      Unit.pop();
      ActiveUnit = Unit.length-1;
   }
   //alert(UnitString());
}

function IncreaseUnitVeterancy(U){
   var R = Rand(10)/10+1;
   if (R>Unit[U].veterancy){
     Unit[U].veterancy = (Unit[U].veterancy+R)/2;
   }
}

function Combat(Attacker,Defender){
   //alert("Combat! "+Attacker+" vs. "+Defender);
   var AttackStrength = Product[Unit[Attacker].type].attack*Unit[Attacker].veterancy;
   var DefenseStrength = Product[Unit[Defender].type].defense*Unit[Defender].veterancy*Terrain[Region[Unit[Defender].row][Unit[Defender].col].terrain].defense;
   for (var Round=1; Round<10; Round++){
      if (Rand(100)<100*AttackStrength/(AttackStrength+DefenseStrength)){
         Unit[Defender].health-=2*Product[Unit[Attacker].type].firepower;
      }else{
         Unit[Attacker].health-=2*Product[Unit[Defender].type].firepower;
      }
   }
   //alert("Combat! "+Unit[Attacker].health+" vs. "+Unit[Defender].health);
   Unit[Defender].health=Math.max(Unit[Defender].health,0);
   Unit[Attacker].health=Math.max(Unit[Attacker].health,0);
   var S = ""
   /* Careful: Deletions can change the order of the Unit array and invalidate subsequent indices */
   if ((Unit[Attacker].health==0) && (Unit[Defender].health==0)){
      DeleteUnit(Attacker);
      DeleteUnit(Defender);
      S="Both units were killed in combat.";
   }else{
      if (Unit[Attacker].health==0){
         RegionImage(Unit[Defender].row,Unit[Defender].col,false);
         IncreaseUnitVeterancy(Defender);
         S = "The attacker was killed in combat. Defender's health is "+Unit[Defender].health+".";
         DeleteUnit(Attacker);
      }else{
         if (Unit[Defender].health==0){
            RegionImage(Unit[Attacker].row,Unit[Attacker].col,false);
            IncreaseUnitVeterancy(Attacker);
            S="The defender was killed in combat. Attacker's health is "+Unit[Attacker].health+".";
	        DeleteUnit(Defender);
         }else{
            RegionImage(Unit[Defender].row,Unit[Defender].col,false);
            RegionImage(Unit[Attacker].row,Unit[Attacker].col,false);
            S="Combat was a draw. The attacker's health is "+Unit[Attacker].health+"; the defender's health is "+Unit[Defender].health+".";
         }
      }
   }
   return(S);
}


function MoveUnit(U,Row,Col){
   Region[Unit[U].row][Unit[U].col].unit = -1;
   LostAtSea = ((Region[Row][Col].terrain==Ocean) && (Region[Unit[U].row][Unit[U].col].terrain==Ocean) && (Rand(100)*Unit[U].movement<=LostAtSeaLikelihood));
   if (LostAtSea){
      alert("This unit was lost at sea.");
      DeleteUnit(U);
   }else{
      var OldRow = Unit[U].row;
      Unit[U].row = Row;
      Unit[U].col = Col;
      Unit[U].movement = Math.max(0,Unit[U].movement-Terrain[Region[Row][Col].terrain].movementCost);
      Region[Row][Col].unit = U;
   }
   var Barbarian=-1;
   for (A=-1; A<=1; A++){
      for (B=-1; B<=1; B++){
         //alert(Region[X+A][Y+B].terrain);
         var S = 'p'+(Row+A)+'_'+(Col+B);
         if (((A!=0)||(B!=0)) && (document.getElementById(S).src.indexOf('u.png')!=-1) && ((Region[Row+A][Col+B].terrain!=Ocean)||(Rand(10)==1)) && (Rand(Math.abs(Row-StartRow))+Rand(3)>5)){
            // Barbarians
            Unit.push({type: Rand(4)+1, row: Row+A, col: Col+B, movement: 0, active: false, player: false, city: -1, health: 10, TroopshipClass: Math.min(Transport,TroopshipClass+Rand(2)-1), veterancy: 1+(Rand(2)-1)/10});
            Region[Row+A][Col+B].unit = Unit.length-1;
         }else{
            if ((Region[Row+A][Col+B].unit!=-1) && !Unit[Region[Row+A][Col+B].unit].player){
			   Barbarian=Region[Row+A][Col+B].unit;
               if(Rand(25)<=5+City.length){
                  Unit[Barbarian].destinationRow = StartRow;
                  Unit[Barbarian].destinationCol = StartCol;
                  Unit[Barbarian].active = true;
               }
			}
         }
         RegionImage(Row+A, Col+B, false);
         if(!LostAtSea && (Unit[U].type==Settler)){
            document.getElementById(S).title = CitySiteString(Row+A,Col+B);
         }
      }
   }
   if ((Barbarian!=-1) && (Math.abs(Row-StartRow)>Math.abs(OldRow-StartRow))){
   	  RegionImage(Row, Col, true);
      alert("Ambushed by a barbarian "+Product[Unit[Barbarian].type].name+"! "+Combat(Barbarian,U));
   }
}

function MoveUnitToDestination(U){
   if((Unit[U].destinationRow==undefined)||(Unit[U].destinationRow==-1)){
      return(false);
   }
   var GoalRow=Unit[U].row;
   var GoalCol=Unit[U].col;
   var GoalDistance=Distance(GoalRow,GoalCol,Unit[U].destinationRow,Unit[U].destinationCol);
   for (Row=Unit[U].row-1; Row<=Unit[U].row+1; Row++){
      for (Col=Unit[U].col-1; Col<=Unit[U].col+1; Col++){
         if ((Region[Row][Col].unit==-1) && (Region[Row][Col].city==-1) && (Distance(Row,Col,Unit[U].destinationRow,Unit[U].destinationCol)<GoalDistance)){
            GoalDistance = Distance(Row,Col,Unit[U].destinationRow,Unit[U].destinationCol);
            GoalRow=Row;
            GoalCol=Col;
         }
      }
   }
   if((Unit[U].row!=GoalRow)||(Unit[U].col!=GoalCol)){
      MoveUnit(U, GoalRow, GoalCol);
      return(true);
   }else{
      return(false);
   }
}


function PeaceInOurTime(){
   for (U=0; U<Units.length; U++){
      if (!Units[U].player){
         Units[U].destinationRow=-1;
         Units[U].active = false;
      }
   }
}


/* Nations */

PlayerCityName = new Array("Babylon", "Lagash", "Nippur", "Ur", "Kish", "Shuruppak", "Kisurra", "Cutha", "Adab", "Umma", "Akkad", "Eridu", "Larsa", "Borsippa", "Sippar", "Nineveh", "Ashur", "Calach", "Carcar", "Hamat",  "Opis", "Cunaxa", "Arbela", "Nisibis", "Carrhae", "Seleucia", "Ctesiphon", "Sittace", "Orchoe", "Apamea");
PlayerCity = 0;


/* Cities */

function CitySiteStats(Row,Col){
   var Stats = {food: 0, production: 0, trade: 0};
   for (var A=-1; A<=1; A++){
      for (var B=-1; B<=1; B++){
         Stats.food += Terrain[Region[Row+A][Col+B].terrain].food;
         Stats.production += Terrain[Region[Row+A][Col+B].terrain].production;
         Stats.trade += Terrain[Region[Row+A][Col+B].terrain].trade;
      }
   }
   return(Stats);
}

function CitySiteString(Row,Col){
   if (Region[Row][Col].terrain!=Ocean){
      var Stats = CitySiteStats(Row,Col);
      return ("City has potential for "+(Stats.food+Stats.production+Stats.trade)+" points ("+Stats.food+"f/"+Stats.production+"p/"+Stats.trade+"t)");
   }else{
      return("Ocean, 100% defense");
   }
}

function CityDescription(C,TellProduct){
   var S=City[C].name+", "+City[C].citizens+" citizens ("+Math.min(City[C].citizens,City[C].happyCitizens)+" happy, "+Math.min(City[C].citizens,City[C].healthyCitizens)+" healthy)";
   S+=", "+City[C].food+"f/"+City[C].production+"p/"+City[C].trade+"t"; //+City[C].science+"s/"+City[C].corruptionRate+"c";
   if(TellProduct){
     S += ", producing "+Product[City[C].product].name+" ("+Math.floor(100*City[C].productionReserve/Product[City[C].product].cost)+"%)";
   }
   return(S);
}

function TooCloseToCity(Row,Col){
   for (var C=0; C<City.length; C++){
      if (Distance(Row,Col,City[C].row,City[C].col)<3){
         return(true);
      }
   }
   return(false);
}


function FoundCity(Row,Col,Player){
   var Stats=CitySiteStats(Row,Col);
   City.push({name: "Unnamed", player: Player, foodReserve: 0, productionReserve: 0, row: Row, col: Col, food: Stats.food, production: Stats.production, trade: Stats.trade, science: 1, corruptionRate: 1, product: Warrior, citizens: 2, happyCitizens: 4, healthyCitizens: 4});
   var C = City.length-1;
   Region[Row][Col].city = C;
   /* Initialize buildings */
   City[C].building = new Array();
   for (X=MaxUnit+1; X<MaxBuilding; X++){
      City[C].building[X] = false;
   }
   City[C].building[Houses] = true;
   City[C].building[Wharf] = (NeighboringRegions(Row,Col,".terrain==Ocean")>0);
   /* Veterancy */
   City[C].veterancy = new Array();
   City[C].veterancy["land"] = 0;
   City[C].veterancy["sea"] = 0;
   City[C].veterancy["air"] = 0;
   City[C].veterancy["missile"] = 0;
   /* DefenseAgainst */
   City[C].defenseAgainst = new Array();
   City[C].defenseAgainst["land"] = 1;
   City[C].defenseAgainst["sea"] = 1;
   City[C].defenseAgainst["air"] = 1;
   City[C].defenseAgainst["missile"] = 1;
   /* Name the city */
   if (Player){
      if (PlayerCity<=PlayerCityName.length-1){
         City[City.length-1].name = PlayerCityName[PlayerCity];
      }else{
         City[City.length-1].name = "City #"+(PlayerCity+1);
      }
      PlayerCity++;
      if (Unit[1].city=-1){
         Unit[1].city=City.length-1;
         RegionImage(Unit[1].row, Unit[1].col, false);
      }
   }else{
      RegionImage(Row, Col, false);
   }
}

function WorkingCitizenOutput(C){
   WorkingCitizens = Math.min(City[C].citizens,Math.min(City[C].healthyCitizens,City[C].happyCitizens));
   return(WorkingCitizens/9);
}

function NextCitizen(C){
   City[C].foodReserve += Math.max(City[C].food*WorkingCitizenOutput(C),1);
   if (City[C].foodReserve>=10*City[C].citizens){
      City[C].foodReserve -= 10*City[C].citizens;
      City[C].citizens++;
   }
   RegionImage(City[C].row,City[C].col,false);
}

function ChangeProduct(C, Prompt){
      var Menu = new Array();
      for (X=MaxUnit; X>=Settler; X--){
         if (Tech[Product[X].prereq].playerOwned){
            Menu.push({name: Product[X].name, value: X});
         }
      }
      for (X=MaxBuilding-1; X>MaxUnit; X--){
         //if ((Tech[Product[X].prereq].playerOwned)&&(City[C].building[(Product[X].prebuilding)])&&(!City[C].building[X])){
         if ((Tech[Product[X].prereq].playerOwned)&&(!City[C].building[X])){
            Menu.push({name: Product[X].name, value: X});
         }
      }
      X = MenuPrompt(Prompt+"  What should they build next? ", Menu);
      City[C].product = X;
}

function NextProduct(C){
   var P=City[C].product;
   City[C].productionReserve += Math.max(City[C].production*WorkingCitizenOutput(C),1);
   if (City[C].productionReserve>=Product[P].cost/2){
      City[C].productionReserve -= Product[P].cost/2;
      if (Product[P].type=='unit'){
         Unit.push({type: P, row: City[C].row, col: City[C].col, movement: Product[City[C].product].mobility, health: Product[P].health, active: true, player: true, city: C, TroopshipClass: TroopshipClass, veterancy: Rand(City[C].veterancy[Product[City[C].product].kind])/10+0.9});
         Region[City[C].row][City[C].col].unit = Unit.length-1;
         RegionImage(City[C].row, City[C].col, false);
      }else{
         if (Product[P].type=='building'){
            City[C].building[P] = true;
            eval(Product[P].code);
         }
      }
      ChangeProduct(C, CityDescription(C,false)+", has built "+Product[P].name+". ");
   }
   RegionImage(City[C].row,City[C].col,false);
}


function BuildInEveryCity(Building){
   for (C=0; C<City.length; C++){
      if (City[C].player){
         if(!City[C].building[Building]){
           City[C].building[Building] = true;
           eval(Product[Building].code);
         }
         if (City[C].product==Building){
            ChangeProduct(C, CityDescription(C,false)+", has built "+Product[P].name+". ");
         }
      }
   }
}

function ForCitiesWith(Building, Code){
   for (C=0; C<City.length; C++){
      if (City[C].player){
         if(City[C].building[Building]){
           eval(Code);
         }
      }
   }
}


/* UI */

var ActiveUnit = 0;

MessageBox = {
    toolbar: document.getElementById("toolbar"),
    element: document.getElementById("message"),
    resumeButton: document.getElementById("resumeButton"),
    body: document.getElementById("body"),
    SetText: function(text) {
        MessageBox.element.innerHTML = text;
    },
    OnHover: function(element) {
        var text; // below is a hack to disable title text in addition a to the custom one on hover
        if (element.title != "" && element.title != null) {text = element.title;}
        else if (element.stored_text == null) {text = "";}
        else {text = element.stored_text;}

       MessageBox.SetText(text);
       //MessageBox.SetLocation(row, col);
       element.stored_text = text;
       element.title = "";
    },
    OnResize: function() {
        MessageBox.element.style["max-width"] =  (MessageBox.body.getBoundingClientRect().right - MessageBox.body.getBoundingClientRect().left) - (MessageBox.resumeButton.getBoundingClientRect().right - MessageBox.resumeButton.getBoundingClientRect().left + 10)
        if (510 < (MessageBox.body.getBoundingClientRect().bottom - MessageBox.body.getBoundingClientRect().top)) {
            MessageBox.toolbar.style["bottom"] = (MessageBox.body.getBoundingClientRect().bottom + MessageBox.body.getBoundingClientRect().top) - 510;
        } else {
            MessageBox.toolbar.style["bottom"] = 0;
        }
    }
}

function MenuPrompt(Message, Menu){
   for (X=0; X<Menu.length; X++){
      Message += (X+1)+". "+Menu[X].name+", ";
   }
   Message = Message.substring(0,Message.length-2);
   X = prompt(Message);
   if ((1<=X)&(X<=Menu.length)){
      return (Menu[X-1].value);
   }else{
      return (Menu[0].value);
   }
}

function NextTech(){
   for(C=0; C<City.length; C++){
      if(City[C].player){
         TechReserve += Math.max(City[C].science*City[C].trade*WorkingCitizenOutput(C)*(1-.3*City[C].corruptionRate),1);
      }
   }
   if (TechReserve>=CurrentTechCost){
      TechReserve -= CurrentTechCost;
   	  Tech[CurrentTech].playerOwned = true;
   	  if (Tech[CurrentTech].code!="") eval(Tech[CurrentTech].code);
      TechCount++;
      var Menu = new Array();
      for (X=AdvancedFlight; X<=Writing; X++){
         if (!Tech[X].playerOwned & Tech[Tech[X].prereq1].playerOwned & Tech[Tech[X].prereq2].playerOwned){
            Menu.push({name: Tech[X].name, value: X});
         }
      }
      X = MenuPrompt("Year "+Year+". Your civilization has discovered "+Tech[CurrentTech].name + ". What do you want to research next? ", Menu);
      CurrentTech = X;
   }
   CurrentTechCost = 5*TechCount;
}


function NextWonder(){
   for(C=0; C<City.length; C++){
      if(City[C].player){
         TradeReserve += Math.floor(City[C].science*City[C].trade*WorkingCitizenOutput(C)*(1-.3*City[C].corruptionRate));
      }
   }
   if (TradeReserve>=CurrentWonderCost){
      if (CurrentWonder!=0){
         TradeReserve -= CurrentWonderCost;
         Wonder[CurrentWonder].player = true;
   	     if (Wonder[CurrentWonder].code!="") eval(Tech[CurrentWonder].code);
   	     S = "Your civilization has built "+Wonder[CurrentWonder].name+".";
   	  }else{
   	     S = "Your civilization is generating surplus trade, which can be invested in Wonders.";
   	  }
      var Menu = new Array();
      for (W=1; W<MaxWonder; W++){
         if (!Wonder[W].player && Tech[Wonder[W].prereq].playerOwned && !Tech[Wonder[W].obsoleteBy].player){
            Menu.push({name: Wonder[W].name, value: W});
         }
      }
      if ((Menu.length>1)||(CurrentWonder==0)){
         X = MenuPrompt(S + " Which Wonder do you want to build next? ", Menu);
         CurrentWonder = X;
         CurrentWonderCost = Wonder[CurrentWonder].cost;
      }
   }
}



function Turn(){
   //alert("starting loop with "+ActiveUnit+" and Unit.length of "+Unit.length);
do{
   while ((ActiveUnit>0) && ((!Unit[ActiveUnit].active) || (Unit[ActiveUnit].movement==0) || (!Unit[ActiveUnit].player))){
      ActiveUnit--;
   }
   //alert("Active Unit = " + ActiveUnit);
   if ((Unit[ActiveUnit].active) && (Unit[ActiveUnit].movement) && (Unit[ActiveUnit].player)){
      RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
   }else{
      for (U=0; U<Unit.length; U++){
         // restore health to standby units
         if (!Unit[U].active){
            if(Unit[U].health!=Product[Unit[U].type].health){
               Unit[U].health += HealingRate;
               if(Unit[U].health>=Product[Unit[U].type].health){
                  Unit[U].health = Product[Unit[U].type].health;
                  Unit[U].active = Unit[U].player;
               }
            }
         }
         if (Unit[U].active){
            Unit[U].movement = Product[Unit[U].type].mobility;
         }
      }
      Year++;
      NextTech();
      NextWonder();
      for (C=0; C<City.length; C++){
         NextCitizen(C);
         NextProduct(C);
      }
      ActiveUnit = Unit.length-1;
      while (ActiveUnit && ((!Unit[ActiveUnit].active) || (!Unit[ActiveUnit].movement) || (!Unit[ActiveUnit].player))){
         ActiveUnit--;
      }
      if (!ActiveUnit && !Unit[ActiveUnit].active && !Unit[ActiveUnit].player){
         for (U=0; U<Unit.length; U++){
            if (Unit[U].player){
               Unit[U].active = true;
               Unit[U].movement = Product[Unit[U].type].mobility;
            }
         }
      }
      ActiveUnit = Unit.length-1;
      while (ActiveUnit && ((!Unit[ActiveUnit].active) || (!Unit[ActiveUnit].movement) || (!Unit[ActiveUnit].player))){
         ActiveUnit--;
      }
      if (!ActiveUnit && !Unit[ActiveUnit].active && !Unit[ActiveUnit].player){
         alert("All your units are destroyed. Game over.")
         ActiveUnit=-1;
      }else{
         RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
      }
   }
}while(MoveUnitToDestination(ActiveUnit));
}


function i(Row, Col){
   Unit[ActiveUnit].destinationRow=-1;
   if ((Row==Unit[ActiveUnit].row) & (Col==Unit[ActiveUnit].col)){
      if (Unit[ActiveUnit].type==Settler){
         if ((Region[Row][Col].terrain!=Ocean) && !TooCloseToCity(Row,Col) && (confirm("Build a city here? " + CitySiteString(Row,Col) + "."))){
            FoundCity(Row,Col,true);
            DeleteUnit(ActiveUnit);
            RegionImage(Row, Col, false);
            Turn();
         }else{
            RegionImage(Row, Col, true);
         }
      }else{
         if(confirm("Put the unit - "+RegionImage(Row,Col,false)+" - on sentry duty (standby)?")){
            Unit[ActiveUnit].active = false;
            Unit[ActiveUnit].movement = 0;
            RegionImage(Row, Col, false);
            Turn();
         }else{
            RegionImage(Row, Col, true);
         }
      }
   }else{
      if (Distance(Row, Col, Unit[ActiveUnit].row, Unit[ActiveUnit].col)<=Math.min(Unit[ActiveUnit].movement,1.5)){
         if (Region[Row][Col].unit!=-1){
            alert(Combat(ActiveUnit,Region[Row][Col].unit));
         }else{
            MoveUnit(ActiveUnit,Row,Col);
         }
         Turn();
      }else{
         //if (document.getElementById('p'+Row+'_'+Col).src!="u.png"){
            //alert(Row+", "+Col);
		    Unit[ActiveUnit].destinationRow = Row;
		    Unit[ActiveUnit].destinationCol = Col;
		    if(MoveUnitToDestination(ActiveUnit)){
		       Turn();
		    }
         //}else{
         //   RegionImage(Unit[ActiveUnit].row, Unit[ActiveUnit].col, true);
         //}
      }
   }
}

for (Row=0; Row<MaxRow; Row++){
   for (Col=0; Col<MaxCol; Col++){
   	  document.write('<img src=u.png id=p', Row,'_', Col,' onclick="i(', Row, ',', Col, ')" onmouseover="MessageBox.OnHover(this);" />');
   }
   document.writeln("<br>");
}
GenerateMap(Region);
SetTechHelp();

/* Preload images */
for (X=Ocean; X<=Mountains; X++){
   document.write("<img style='display:none' src="+Terrain[X].symbol+".png />");
}
document.write("<img style='display:none' src=city_player.png />");

for (Col=0; Col<MaxUnit-1; Col++){
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_player.png />");
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_focus.png />");
   document.write("<img style='display:none' src="+Product[Col+1].imgStub+"_enemy.png />");
}

for (Row=0; Row<7; Row++){
   for (Col=0; Col<MaxCol; Col++){
      document.getElementById('p'+Row+"_"+Col).src = "u.png";
   }
}

for (Row=StartRow-1; Row<=StartRow+1; Row++){
   for (Col=StartCol-1; Col<=StartCol+2; Col++){
      document.getElementById('p'+Row+"_"+Col).src = Terrain[Region[Row][Col].terrain].symbol+".png";
   }
}

document.getElementById('p'+StartRow+"_"+StartCol).src = "settler_player.png";
document.getElementById('p'+StartRow+"_"+(StartCol+1)).src = "warrior_player.png";
Unit[0] = {type: Settler, row: StartRow, col: StartCol, movement: 1, active: true, player: true, city: -1, health: 10, TroopshipClass: Boat, veterancy:1};
Unit[1] = {type: Warrior, row: StartRow, col: StartCol+1, movement: 1, active: true, player: true, city: -1, health: 10, TroopshipClass: Boat, veterancy:1};
Region[StartRow][StartCol].unit = 0;
Region[StartRow][StartCol+1].unit = 1;

NextTech();
Turn();

</script>
</body>
</html>

